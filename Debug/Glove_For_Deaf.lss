
Glove_For_Deaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a6  00800060  00003d7e  00003e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800206  00800206  00003fb8  2**0
                  ALLOC
  3 .stab         00003438  00000000  00000000  00003fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000133c  00000000  00000000  000073f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000872c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000886c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000089dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a625  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c2c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c420  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_1>
       8:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_2>
       c:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 28 14 	call	0x2850	; 0x2850 <main>
      8a:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 96 1e 	jmp	0x3d2c	; 0x3d2c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b2 1e 	jmp	0x3d64	; 0x3d64 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enuinit>:
#include "../../LIBRARY/stdTypes.h"

#include "GIE_int.h"


ES_t GIE_enuinit(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//SREG &= ~ (1<<7);
	asm("CLI");
     b4e:	f8 94       	cli
	return ES_OK;
     b50:	80 e0       	ldi	r24, 0x00	; 0
}
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <GIE_enuEnable>:
ES_t GIE_enuEnable(){
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
	//SREG |= (1<<7);
	asm("SEI");
     b60:	78 94       	sei
	return ES_OK;
     b62:	80 e0       	ldi	r24, 0x00	; 0
}
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <GIE_enuDisable>:

ES_t GIE_enuDisable(){
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62

	//SREG &= ~ (1<<7);
	asm("CLI");
     b72:	f8 94       	cli
	return ES_OK;
     b74:	80 e0       	ldi	r24, 0x00	; 0
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <EXTI_init>:
#include "EXTI_config.h"
#include "EXTI_priv.h"

static void(*ptr_globalEXTI[3])(void) = {NULL,NULL,NULL};

ES_t EXTI_init(EXTI_t *copy_A){
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <EXTI_init+0x6>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <EXTI_init+0x8>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	9c 83       	std	Y+4, r25	; 0x04
     b8a:	8b 83       	std	Y+3, r24	; 0x03

u8 error_state = ES_NOK;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	8a 83       	std	Y+2, r24	; 0x02

if (copy_A != NULL){
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	9c 81       	ldd	r25, Y+4	; 0x04
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	09 f4       	brne	.+2      	; 0xb9a <EXTI_init+0x1e>
     b98:	21 c2       	rjmp	.+1090   	; 0xfdc <EXTI_init+0x460>
	error_state = ES_OK;
     b9a:	1a 82       	std	Y+2, r1	; 0x02
	for(u8 i=0;i<intr_num;i++){
     b9c:	19 82       	std	Y+1, r1	; 0x01
     b9e:	1a c2       	rjmp	.+1076   	; 0xfd4 <EXTI_init+0x458>
		if(copy_A[i].EXTI_pin == EXTI0)
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	c9 01       	movw	r24, r18
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	28 0f       	add	r18, r24
     bae:	39 1f       	adc	r19, r25
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	fc 01       	movw	r30, r24
     bb6:	e2 0f       	add	r30, r18
     bb8:	f3 1f       	adc	r31, r19
     bba:	80 81       	ld	r24, Z
     bbc:	88 23       	and	r24, r24
     bbe:	41 f4       	brne	.+16     	; 0xbd0 <EXTI_init+0x54>
			GICR |= (1<<6);
     bc0:	ab e5       	ldi	r26, 0x5B	; 91
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	eb e5       	ldi	r30, 0x5B	; 91
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	80 64       	ori	r24, 0x40	; 64
     bcc:	8c 93       	st	X, r24
     bce:	33 c0       	rjmp	.+102    	; 0xc36 <EXTI_init+0xba>
		else if(copy_A[i].EXTI_pin == EXTI1)
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	c9 01       	movw	r24, r18
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	28 0f       	add	r18, r24
     bde:	39 1f       	adc	r19, r25
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	fc 01       	movw	r30, r24
     be6:	e2 0f       	add	r30, r18
     be8:	f3 1f       	adc	r31, r19
     bea:	80 81       	ld	r24, Z
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	41 f4       	brne	.+16     	; 0xc00 <EXTI_init+0x84>
			GICR |= (1<<7);
     bf0:	ab e5       	ldi	r26, 0x5B	; 91
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	eb e5       	ldi	r30, 0x5B	; 91
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 68       	ori	r24, 0x80	; 128
     bfc:	8c 93       	st	X, r24
     bfe:	1b c0       	rjmp	.+54     	; 0xc36 <EXTI_init+0xba>
		else if(copy_A[i].EXTI_pin == EXTI2)
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	c9 01       	movw	r24, r18
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	28 0f       	add	r18, r24
     c0e:	39 1f       	adc	r19, r25
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	fc 01       	movw	r30, r24
     c16:	e2 0f       	add	r30, r18
     c18:	f3 1f       	adc	r31, r19
     c1a:	80 81       	ld	r24, Z
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	41 f4       	brne	.+16     	; 0xc30 <EXTI_init+0xb4>
			GICR |= (1<<5);
     c20:	ab e5       	ldi	r26, 0x5B	; 91
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	eb e5       	ldi	r30, 0x5B	; 91
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 62       	ori	r24, 0x20	; 32
     c2c:	8c 93       	st	X, r24
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <EXTI_init+0xba>
		else
			{error_state = ES_OUT_OF_RANGE;
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	8a 83       	std	Y+2, r24	; 0x02
     c34:	d3 c1       	rjmp	.+934    	; 0xfdc <EXTI_init+0x460>
			break;}
		if(copy_A[i].EXTI_mode == enabled)
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	c9 01       	movw	r24, r18
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	28 0f       	add	r18, r24
     c44:	39 1f       	adc	r19, r25
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	fc 01       	movw	r30, r24
     c4c:	e2 0f       	add	r30, r18
     c4e:	f3 1f       	adc	r31, r19
     c50:	81 81       	ldd	r24, Z+1	; 0x01
     c52:	8f 30       	cpi	r24, 0x0F	; 15
     c54:	41 f4       	brne	.+16     	; 0xc66 <EXTI_init+0xea>
			GIFR |= (1<<6);
     c56:	aa e5       	ldi	r26, 0x5A	; 90
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ea e5       	ldi	r30, 0x5A	; 90
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	80 64       	ori	r24, 0x40	; 64
     c62:	8c 93       	st	X, r24
     c64:	1b c0       	rjmp	.+54     	; 0xc9c <EXTI_init+0x120>
		else if(copy_A[i].EXTI_mode == pooling)
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	c9 01       	movw	r24, r18
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	28 0f       	add	r18, r24
     c74:	39 1f       	adc	r19, r25
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	fc 01       	movw	r30, r24
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	81 81       	ldd	r24, Z+1	; 0x01
     c82:	80 31       	cpi	r24, 0x10	; 16
     c84:	41 f4       	brne	.+16     	; 0xc96 <EXTI_init+0x11a>
			GIFR &=~ (1<<6);
     c86:	aa e5       	ldi	r26, 0x5A	; 90
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e5       	ldi	r30, 0x5A	; 90
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8f 7b       	andi	r24, 0xBF	; 191
     c92:	8c 93       	st	X, r24
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <EXTI_init+0x120>
		else
				{error_state = ES_OUT_OF_RANGE;
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	8a 83       	std	Y+2, r24	; 0x02
     c9a:	a0 c1       	rjmp	.+832    	; 0xfdc <EXTI_init+0x460>
				break;}
		if(copy_A[i].EXTI_pin == EXTI0 && copy_A[i].EXTI_status == low_level)
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	c9 01       	movw	r24, r18
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	28 0f       	add	r18, r24
     caa:	39 1f       	adc	r19, r25
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	fc 01       	movw	r30, r24
     cb2:	e2 0f       	add	r30, r18
     cb4:	f3 1f       	adc	r31, r19
     cb6:	80 81       	ld	r24, Z
     cb8:	88 23       	and	r24, r24
     cba:	c1 f4       	brne	.+48     	; 0xcec <EXTI_init+0x170>
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	c9 01       	movw	r24, r18
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	28 0f       	add	r18, r24
     cca:	39 1f       	adc	r19, r25
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	fc 01       	movw	r30, r24
     cd2:	e2 0f       	add	r30, r18
     cd4:	f3 1f       	adc	r31, r19
     cd6:	82 81       	ldd	r24, Z+2	; 0x02
     cd8:	8b 30       	cpi	r24, 0x0B	; 11
     cda:	41 f4       	brne	.+16     	; 0xcec <EXTI_init+0x170>
			MCUCR &=~ (3<<0);
     cdc:	a5 e5       	ldi	r26, 0x55	; 85
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e5 e5       	ldi	r30, 0x55	; 85
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8c 7f       	andi	r24, 0xFC	; 252
     ce8:	8c 93       	st	X, r24
     cea:	7b c0       	rjmp	.+246    	; 0xde2 <EXTI_init+0x266>
		else if(copy_A[i].EXTI_pin == EXTI0 && copy_A[i].EXTI_status == any_logical)
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	c9 01       	movw	r24, r18
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	28 0f       	add	r18, r24
     cfa:	39 1f       	adc	r19, r25
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	fc 01       	movw	r30, r24
     d02:	e2 0f       	add	r30, r18
     d04:	f3 1f       	adc	r31, r19
     d06:	80 81       	ld	r24, Z
     d08:	88 23       	and	r24, r24
     d0a:	c1 f4       	brne	.+48     	; 0xd3c <EXTI_init+0x1c0>
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	c9 01       	movw	r24, r18
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	28 0f       	add	r18, r24
     d1a:	39 1f       	adc	r19, r25
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	fc 01       	movw	r30, r24
     d22:	e2 0f       	add	r30, r18
     d24:	f3 1f       	adc	r31, r19
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	8c 30       	cpi	r24, 0x0C	; 12
     d2a:	41 f4       	brne	.+16     	; 0xd3c <EXTI_init+0x1c0>
			MCUCR |= (1<<0);
     d2c:	a5 e5       	ldi	r26, 0x55	; 85
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e5 e5       	ldi	r30, 0x55	; 85
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	81 60       	ori	r24, 0x01	; 1
     d38:	8c 93       	st	X, r24
     d3a:	53 c0       	rjmp	.+166    	; 0xde2 <EXTI_init+0x266>
		else if(copy_A[i].EXTI_pin == EXTI0 && copy_A[i].EXTI_status == rising_edge)
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	c9 01       	movw	r24, r18
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	28 0f       	add	r18, r24
     d4a:	39 1f       	adc	r19, r25
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	fc 01       	movw	r30, r24
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	80 81       	ld	r24, Z
     d58:	88 23       	and	r24, r24
     d5a:	c1 f4       	brne	.+48     	; 0xd8c <EXTI_init+0x210>
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	c9 01       	movw	r24, r18
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	28 0f       	add	r18, r24
     d6a:	39 1f       	adc	r19, r25
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	fc 01       	movw	r30, r24
     d72:	e2 0f       	add	r30, r18
     d74:	f3 1f       	adc	r31, r19
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	8d 30       	cpi	r24, 0x0D	; 13
     d7a:	41 f4       	brne	.+16     	; 0xd8c <EXTI_init+0x210>
			MCUCR |= (3<<0);
     d7c:	a5 e5       	ldi	r26, 0x55	; 85
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e5 e5       	ldi	r30, 0x55	; 85
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	83 60       	ori	r24, 0x03	; 3
     d88:	8c 93       	st	X, r24
     d8a:	2b c0       	rjmp	.+86     	; 0xde2 <EXTI_init+0x266>
		else if(copy_A[i].EXTI_pin == EXTI0 && copy_A[i].EXTI_status == falling_edge)
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	c9 01       	movw	r24, r18
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	28 0f       	add	r18, r24
     d9a:	39 1f       	adc	r19, r25
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	fc 01       	movw	r30, r24
     da2:	e2 0f       	add	r30, r18
     da4:	f3 1f       	adc	r31, r19
     da6:	80 81       	ld	r24, Z
     da8:	88 23       	and	r24, r24
     daa:	c1 f4       	brne	.+48     	; 0xddc <EXTI_init+0x260>
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	c9 01       	movw	r24, r18
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	28 0f       	add	r18, r24
     dba:	39 1f       	adc	r19, r25
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	fc 01       	movw	r30, r24
     dc2:	e2 0f       	add	r30, r18
     dc4:	f3 1f       	adc	r31, r19
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	8e 30       	cpi	r24, 0x0E	; 14
     dca:	41 f4       	brne	.+16     	; 0xddc <EXTI_init+0x260>
			MCUCR |= (2<<0);
     dcc:	a5 e5       	ldi	r26, 0x55	; 85
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e5 e5       	ldi	r30, 0x55	; 85
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	82 60       	ori	r24, 0x02	; 2
     dd8:	8c 93       	st	X, r24
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <EXTI_init+0x266>
		else
				{error_state = ES_OUT_OF_RANGE;
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	fd c0       	rjmp	.+506    	; 0xfdc <EXTI_init+0x460>
				break;}

		if(copy_A[i].EXTI_pin == EXTI1 && copy_A[i].EXTI_status == low_level)
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	c9 01       	movw	r24, r18
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	28 0f       	add	r18, r24
     df0:	39 1f       	adc	r19, r25
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	fc 01       	movw	r30, r24
     df8:	e2 0f       	add	r30, r18
     dfa:	f3 1f       	adc	r31, r19
     dfc:	80 81       	ld	r24, Z
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	c1 f4       	brne	.+48     	; 0xe32 <EXTI_init+0x2b6>
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	c9 01       	movw	r24, r18
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	28 0f       	add	r18, r24
     e10:	39 1f       	adc	r19, r25
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	fc 01       	movw	r30, r24
     e18:	e2 0f       	add	r30, r18
     e1a:	f3 1f       	adc	r31, r19
     e1c:	82 81       	ldd	r24, Z+2	; 0x02
     e1e:	8b 30       	cpi	r24, 0x0B	; 11
     e20:	41 f4       	brne	.+16     	; 0xe32 <EXTI_init+0x2b6>
			MCUCR &=~ (3<<2);
     e22:	a5 e5       	ldi	r26, 0x55	; 85
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e5 e5       	ldi	r30, 0x55	; 85
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	83 7f       	andi	r24, 0xF3	; 243
     e2e:	8c 93       	st	X, r24
     e30:	7b c0       	rjmp	.+246    	; 0xf28 <EXTI_init+0x3ac>
		else if(copy_A[i].EXTI_pin == EXTI1 && copy_A[i].EXTI_status == any_logical)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	c9 01       	movw	r24, r18
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	28 0f       	add	r18, r24
     e40:	39 1f       	adc	r19, r25
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	fc 01       	movw	r30, r24
     e48:	e2 0f       	add	r30, r18
     e4a:	f3 1f       	adc	r31, r19
     e4c:	80 81       	ld	r24, Z
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	c1 f4       	brne	.+48     	; 0xe82 <EXTI_init+0x306>
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	c9 01       	movw	r24, r18
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	28 0f       	add	r18, r24
     e60:	39 1f       	adc	r19, r25
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	fc 01       	movw	r30, r24
     e68:	e2 0f       	add	r30, r18
     e6a:	f3 1f       	adc	r31, r19
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	8c 30       	cpi	r24, 0x0C	; 12
     e70:	41 f4       	brne	.+16     	; 0xe82 <EXTI_init+0x306>
			MCUCR |= (1<<2);
     e72:	a5 e5       	ldi	r26, 0x55	; 85
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e5 e5       	ldi	r30, 0x55	; 85
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	84 60       	ori	r24, 0x04	; 4
     e7e:	8c 93       	st	X, r24
     e80:	53 c0       	rjmp	.+166    	; 0xf28 <EXTI_init+0x3ac>
		else if(copy_A[i].EXTI_pin == EXTI1 && copy_A[i].EXTI_status == rising_edge)
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	c9 01       	movw	r24, r18
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	28 0f       	add	r18, r24
     e90:	39 1f       	adc	r19, r25
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	fc 01       	movw	r30, r24
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	80 81       	ld	r24, Z
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	c1 f4       	brne	.+48     	; 0xed2 <EXTI_init+0x356>
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	c9 01       	movw	r24, r18
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	28 0f       	add	r18, r24
     eb0:	39 1f       	adc	r19, r25
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	9c 81       	ldd	r25, Y+4	; 0x04
     eb6:	fc 01       	movw	r30, r24
     eb8:	e2 0f       	add	r30, r18
     eba:	f3 1f       	adc	r31, r19
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	8d 30       	cpi	r24, 0x0D	; 13
     ec0:	41 f4       	brne	.+16     	; 0xed2 <EXTI_init+0x356>
			MCUCR |= (3<<2);
     ec2:	a5 e5       	ldi	r26, 0x55	; 85
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e5 e5       	ldi	r30, 0x55	; 85
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8c 60       	ori	r24, 0x0C	; 12
     ece:	8c 93       	st	X, r24
     ed0:	2b c0       	rjmp	.+86     	; 0xf28 <EXTI_init+0x3ac>
		else if(copy_A[i].EXTI_pin == EXTI1 && copy_A[i].EXTI_status == falling_edge)
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	c9 01       	movw	r24, r18
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	28 0f       	add	r18, r24
     ee0:	39 1f       	adc	r19, r25
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	fc 01       	movw	r30, r24
     ee8:	e2 0f       	add	r30, r18
     eea:	f3 1f       	adc	r31, r19
     eec:	80 81       	ld	r24, Z
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	c1 f4       	brne	.+48     	; 0xf22 <EXTI_init+0x3a6>
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	c9 01       	movw	r24, r18
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	28 0f       	add	r18, r24
     f00:	39 1f       	adc	r19, r25
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	fc 01       	movw	r30, r24
     f08:	e2 0f       	add	r30, r18
     f0a:	f3 1f       	adc	r31, r19
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	8e 30       	cpi	r24, 0x0E	; 14
     f10:	41 f4       	brne	.+16     	; 0xf22 <EXTI_init+0x3a6>
			MCUCR |= (2<<2);
     f12:	a5 e5       	ldi	r26, 0x55	; 85
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e5 e5       	ldi	r30, 0x55	; 85
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	88 60       	ori	r24, 0x08	; 8
     f1e:	8c 93       	st	X, r24
     f20:	03 c0       	rjmp	.+6      	; 0xf28 <EXTI_init+0x3ac>
		else
				{error_state = ES_OUT_OF_RANGE;
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	8a 83       	std	Y+2, r24	; 0x02
     f26:	5a c0       	rjmp	.+180    	; 0xfdc <EXTI_init+0x460>
				break;}

		if(copy_A[i].EXTI_pin == EXTI2 && copy_A[i].EXTI_status == falling_edge)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	c9 01       	movw	r24, r18
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	28 0f       	add	r18, r24
     f36:	39 1f       	adc	r19, r25
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	9c 81       	ldd	r25, Y+4	; 0x04
     f3c:	fc 01       	movw	r30, r24
     f3e:	e2 0f       	add	r30, r18
     f40:	f3 1f       	adc	r31, r19
     f42:	80 81       	ld	r24, Z
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	c1 f4       	brne	.+48     	; 0xf78 <EXTI_init+0x3fc>
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	c9 01       	movw	r24, r18
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	28 0f       	add	r18, r24
     f56:	39 1f       	adc	r19, r25
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	fc 01       	movw	r30, r24
     f5e:	e2 0f       	add	r30, r18
     f60:	f3 1f       	adc	r31, r19
     f62:	82 81       	ldd	r24, Z+2	; 0x02
     f64:	8e 30       	cpi	r24, 0x0E	; 14
     f66:	41 f4       	brne	.+16     	; 0xf78 <EXTI_init+0x3fc>
			MCUCSR &=~ (1<<6);
     f68:	a4 e5       	ldi	r26, 0x54	; 84
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e4 e5       	ldi	r30, 0x54	; 84
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8f 7b       	andi	r24, 0xBF	; 191
     f74:	8c 93       	st	X, r24
     f76:	2b c0       	rjmp	.+86     	; 0xfce <EXTI_init+0x452>
		else if(copy_A[i].EXTI_pin == EXTI2 && copy_A[i].EXTI_status == rising_edge)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	c9 01       	movw	r24, r18
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	28 0f       	add	r18, r24
     f86:	39 1f       	adc	r19, r25
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	fc 01       	movw	r30, r24
     f8e:	e2 0f       	add	r30, r18
     f90:	f3 1f       	adc	r31, r19
     f92:	80 81       	ld	r24, Z
     f94:	82 30       	cpi	r24, 0x02	; 2
     f96:	c1 f4       	brne	.+48     	; 0xfc8 <EXTI_init+0x44c>
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	c9 01       	movw	r24, r18
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	28 0f       	add	r18, r24
     fa6:	39 1f       	adc	r19, r25
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	fc 01       	movw	r30, r24
     fae:	e2 0f       	add	r30, r18
     fb0:	f3 1f       	adc	r31, r19
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	8d 30       	cpi	r24, 0x0D	; 13
     fb6:	41 f4       	brne	.+16     	; 0xfc8 <EXTI_init+0x44c>
			MCUCSR |= (1<<6);
     fb8:	a4 e5       	ldi	r26, 0x54	; 84
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e4 e5       	ldi	r30, 0x54	; 84
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	8c 93       	st	X, r24
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <EXTI_init+0x452>
		else
				{error_state = ES_OUT_OF_RANGE;
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	8a 83       	std	Y+2, r24	; 0x02
     fcc:	07 c0       	rjmp	.+14     	; 0xfdc <EXTI_init+0x460>

u8 error_state = ES_NOK;

if (copy_A != NULL){
	error_state = ES_OK;
	for(u8 i=0;i<intr_num;i++){
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <EXTI_init+0x460>
     fda:	e2 cd       	rjmp	.-1084   	; 0xba0 <EXTI_init+0x24>
		else
				{error_state = ES_OUT_OF_RANGE;
				break;}
		}
		}
				return error_state;
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02

}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <EXTI_enable>:

ES_t EXTI_enable(EXTI_t *copy_A){
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <EXTI_enable+0x6>
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9b 83       	std	Y+3, r25	; 0x03
     ffa:	8a 83       	std	Y+2, r24	; 0x02

	u8 error_state = ES_NOK;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	89 83       	std	Y+1, r24	; 0x01
if(copy_A != NULL){
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	51 f1       	breq	.+84     	; 0x105c <EXTI_enable+0x70>
		error_state = ES_OK;
    1008:	19 82       	std	Y+1, r1	; 0x01
		if(copy_A->EXTI_pin == EXTI0)
    100a:	ea 81       	ldd	r30, Y+2	; 0x02
    100c:	fb 81       	ldd	r31, Y+3	; 0x03
    100e:	80 81       	ld	r24, Z
    1010:	88 23       	and	r24, r24
    1012:	41 f4       	brne	.+16     	; 0x1024 <EXTI_enable+0x38>
			GICR |= (1<<6);
    1014:	ab e5       	ldi	r26, 0x5B	; 91
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	eb e5       	ldi	r30, 0x5B	; 91
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 64       	ori	r24, 0x40	; 64
    1020:	8c 93       	st	X, r24
    1022:	1c c0       	rjmp	.+56     	; 0x105c <EXTI_enable+0x70>
		else if(copy_A->EXTI_pin == EXTI1)
    1024:	ea 81       	ldd	r30, Y+2	; 0x02
    1026:	fb 81       	ldd	r31, Y+3	; 0x03
    1028:	80 81       	ld	r24, Z
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	41 f4       	brne	.+16     	; 0x103e <EXTI_enable+0x52>
			GICR |= (1<<7);
    102e:	ab e5       	ldi	r26, 0x5B	; 91
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	eb e5       	ldi	r30, 0x5B	; 91
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	8c 93       	st	X, r24
    103c:	0f c0       	rjmp	.+30     	; 0x105c <EXTI_enable+0x70>
		else if(copy_A->EXTI_pin == EXTI2)
    103e:	ea 81       	ldd	r30, Y+2	; 0x02
    1040:	fb 81       	ldd	r31, Y+3	; 0x03
    1042:	80 81       	ld	r24, Z
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	41 f4       	brne	.+16     	; 0x1058 <EXTI_enable+0x6c>
			GICR |= (1<<5);
    1048:	ab e5       	ldi	r26, 0x5B	; 91
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	eb e5       	ldi	r30, 0x5B	; 91
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	80 62       	ori	r24, 0x20	; 32
    1054:	8c 93       	st	X, r24
    1056:	02 c0       	rjmp	.+4      	; 0x105c <EXTI_enable+0x70>
		else error_state = ES_OUT_OF_RANGE;
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	89 83       	std	Y+1, r24	; 0x01
	}
		return error_state;
    105c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <EXTI_disable>:

ES_t EXTI_disable(EXTI_t *copy_A){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <EXTI_disable+0x6>
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	9b 83       	std	Y+3, r25	; 0x03
    1078:	8a 83       	std	Y+2, r24	; 0x02

	u8 error_state =ES_NOK;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	89 83       	std	Y+1, r24	; 0x01
	if(copy_A != NULL){
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	51 f1       	breq	.+84     	; 0x10da <EXTI_disable+0x70>
			error_state = ES_OK;
    1086:	19 82       	std	Y+1, r1	; 0x01
			if(copy_A->EXTI_pin == EXTI0)
    1088:	ea 81       	ldd	r30, Y+2	; 0x02
    108a:	fb 81       	ldd	r31, Y+3	; 0x03
    108c:	80 81       	ld	r24, Z
    108e:	88 23       	and	r24, r24
    1090:	41 f4       	brne	.+16     	; 0x10a2 <EXTI_disable+0x38>
				GICR &=~ (1<<6);
    1092:	ab e5       	ldi	r26, 0x5B	; 91
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	eb e5       	ldi	r30, 0x5B	; 91
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 7b       	andi	r24, 0xBF	; 191
    109e:	8c 93       	st	X, r24
    10a0:	1c c0       	rjmp	.+56     	; 0x10da <EXTI_disable+0x70>
			else if(copy_A->EXTI_pin == EXTI1)
    10a2:	ea 81       	ldd	r30, Y+2	; 0x02
    10a4:	fb 81       	ldd	r31, Y+3	; 0x03
    10a6:	80 81       	ld	r24, Z
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	41 f4       	brne	.+16     	; 0x10bc <EXTI_disable+0x52>
				GICR &=~ (1<<7);
    10ac:	ab e5       	ldi	r26, 0x5B	; 91
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	eb e5       	ldi	r30, 0x5B	; 91
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8f 77       	andi	r24, 0x7F	; 127
    10b8:	8c 93       	st	X, r24
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <EXTI_disable+0x70>
			else if(copy_A->EXTI_pin == EXTI2)
    10bc:	ea 81       	ldd	r30, Y+2	; 0x02
    10be:	fb 81       	ldd	r31, Y+3	; 0x03
    10c0:	80 81       	ld	r24, Z
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	41 f4       	brne	.+16     	; 0x10d6 <EXTI_disable+0x6c>
				GICR &=~ (1<<5);
    10c6:	ab e5       	ldi	r26, 0x5B	; 91
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	eb e5       	ldi	r30, 0x5B	; 91
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8f 7d       	andi	r24, 0xDF	; 223
    10d2:	8c 93       	st	X, r24
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <EXTI_disable+0x70>
			else error_state = ES_OUT_OF_RANGE;
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	89 83       	std	Y+1, r24	; 0x01
	}
		return error_state;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
	}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <EXTI_statues>:

ES_t EXTI_statues(EXTI_t *copy_A,u8 status){
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	2a 97       	sbiw	r28, 0x0a	; 10
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	9b 83       	std	Y+3, r25	; 0x03
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	6c 83       	std	Y+4, r22	; 0x04

	u8 error_state =ES_NOK;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
if(copy_A != NULL)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	9b 81       	ldd	r25, Y+3	; 0x03
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	09 f0       	breq	.+2      	; 0x1110 <EXTI_statues+0x28>
	error_state = ES_OK;
    110e:	19 82       	std	Y+1, r1	; 0x01
		if(copy_A ->EXTI_pin== EXTI0)
    1110:	ea 81       	ldd	r30, Y+2	; 0x02
    1112:	fb 81       	ldd	r31, Y+3	; 0x03
    1114:	80 81       	ld	r24, Z
    1116:	88 23       	and	r24, r24
    1118:	09 f0       	breq	.+2      	; 0x111c <EXTI_statues+0x34>
    111a:	43 c0       	rjmp	.+134    	; 0x11a2 <EXTI_statues+0xba>
			switch(status){
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	3a 87       	std	Y+10, r19	; 0x0a
    1124:	29 87       	std	Y+9, r18	; 0x09
    1126:	89 85       	ldd	r24, Y+9	; 0x09
    1128:	9a 85       	ldd	r25, Y+10	; 0x0a
    112a:	8c 30       	cpi	r24, 0x0C	; 12
    112c:	91 05       	cpc	r25, r1
    112e:	f1 f0       	breq	.+60     	; 0x116c <EXTI_statues+0x84>
    1130:	29 85       	ldd	r18, Y+9	; 0x09
    1132:	3a 85       	ldd	r19, Y+10	; 0x0a
    1134:	2d 30       	cpi	r18, 0x0D	; 13
    1136:	31 05       	cpc	r19, r1
    1138:	34 f4       	brge	.+12     	; 0x1146 <EXTI_statues+0x5e>
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	8b 30       	cpi	r24, 0x0B	; 11
    1140:	91 05       	cpc	r25, r1
    1142:	61 f0       	breq	.+24     	; 0x115c <EXTI_statues+0x74>
    1144:	2b c0       	rjmp	.+86     	; 0x119c <EXTI_statues+0xb4>
    1146:	29 85       	ldd	r18, Y+9	; 0x09
    1148:	3a 85       	ldd	r19, Y+10	; 0x0a
    114a:	2d 30       	cpi	r18, 0x0D	; 13
    114c:	31 05       	cpc	r19, r1
    114e:	b1 f0       	breq	.+44     	; 0x117c <EXTI_statues+0x94>
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	8e 30       	cpi	r24, 0x0E	; 14
    1156:	91 05       	cpc	r25, r1
    1158:	c9 f0       	breq	.+50     	; 0x118c <EXTI_statues+0xa4>
    115a:	20 c0       	rjmp	.+64     	; 0x119c <EXTI_statues+0xb4>
			case low_level:
				MCUCR &=~ (3<<0);
    115c:	a5 e5       	ldi	r26, 0x55	; 85
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e5 e5       	ldi	r30, 0x55	; 85
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8c 7f       	andi	r24, 0xFC	; 252
    1168:	8c 93       	st	X, r24
    116a:	8e c0       	rjmp	.+284    	; 0x1288 <EXTI_statues+0x1a0>
				break;

			case any_logical:
				MCUCR |= (1<<0);
    116c:	a5 e5       	ldi	r26, 0x55	; 85
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e5 e5       	ldi	r30, 0x55	; 85
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	81 60       	ori	r24, 0x01	; 1
    1178:	8c 93       	st	X, r24
    117a:	86 c0       	rjmp	.+268    	; 0x1288 <EXTI_statues+0x1a0>
				break;

			case rising_edge:
				MCUCR |= (3<<0);
    117c:	a5 e5       	ldi	r26, 0x55	; 85
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e5 e5       	ldi	r30, 0x55	; 85
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	83 60       	ori	r24, 0x03	; 3
    1188:	8c 93       	st	X, r24
    118a:	7e c0       	rjmp	.+252    	; 0x1288 <EXTI_statues+0x1a0>
				break;

			case falling_edge:
				MCUCR |= (2<<0);
    118c:	a5 e5       	ldi	r26, 0x55	; 85
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e5 e5       	ldi	r30, 0x55	; 85
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	82 60       	ori	r24, 0x02	; 2
    1198:	8c 93       	st	X, r24
    119a:	76 c0       	rjmp	.+236    	; 0x1288 <EXTI_statues+0x1a0>
				break;
			default : error_state = ES_OUT_OF_RANGE;
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	73 c0       	rjmp	.+230    	; 0x1288 <EXTI_statues+0x1a0>
			}
		else if(copy_A ->EXTI_pin== EXTI1)
    11a2:	ea 81       	ldd	r30, Y+2	; 0x02
    11a4:	fb 81       	ldd	r31, Y+3	; 0x03
    11a6:	80 81       	ld	r24, Z
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	09 f0       	breq	.+2      	; 0x11ae <EXTI_statues+0xc6>
    11ac:	43 c0       	rjmp	.+134    	; 0x1234 <EXTI_statues+0x14c>
			switch(status){
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	38 87       	std	Y+8, r19	; 0x08
    11b6:	2f 83       	std	Y+7, r18	; 0x07
    11b8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ba:	98 85       	ldd	r25, Y+8	; 0x08
    11bc:	8c 30       	cpi	r24, 0x0C	; 12
    11be:	91 05       	cpc	r25, r1
    11c0:	f1 f0       	breq	.+60     	; 0x11fe <EXTI_statues+0x116>
    11c2:	2f 81       	ldd	r18, Y+7	; 0x07
    11c4:	38 85       	ldd	r19, Y+8	; 0x08
    11c6:	2d 30       	cpi	r18, 0x0D	; 13
    11c8:	31 05       	cpc	r19, r1
    11ca:	34 f4       	brge	.+12     	; 0x11d8 <EXTI_statues+0xf0>
    11cc:	8f 81       	ldd	r24, Y+7	; 0x07
    11ce:	98 85       	ldd	r25, Y+8	; 0x08
    11d0:	8b 30       	cpi	r24, 0x0B	; 11
    11d2:	91 05       	cpc	r25, r1
    11d4:	61 f0       	breq	.+24     	; 0x11ee <EXTI_statues+0x106>
    11d6:	2b c0       	rjmp	.+86     	; 0x122e <EXTI_statues+0x146>
    11d8:	2f 81       	ldd	r18, Y+7	; 0x07
    11da:	38 85       	ldd	r19, Y+8	; 0x08
    11dc:	2d 30       	cpi	r18, 0x0D	; 13
    11de:	31 05       	cpc	r19, r1
    11e0:	b1 f0       	breq	.+44     	; 0x120e <EXTI_statues+0x126>
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	8e 30       	cpi	r24, 0x0E	; 14
    11e8:	91 05       	cpc	r25, r1
    11ea:	c9 f0       	breq	.+50     	; 0x121e <EXTI_statues+0x136>
    11ec:	20 c0       	rjmp	.+64     	; 0x122e <EXTI_statues+0x146>
			case low_level:
				MCUCR &=~ (3<<2);
    11ee:	a5 e5       	ldi	r26, 0x55	; 85
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e5 e5       	ldi	r30, 0x55	; 85
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	83 7f       	andi	r24, 0xF3	; 243
    11fa:	8c 93       	st	X, r24
    11fc:	45 c0       	rjmp	.+138    	; 0x1288 <EXTI_statues+0x1a0>
				break;

			case any_logical:
				MCUCR |= (1<<2);
    11fe:	a5 e5       	ldi	r26, 0x55	; 85
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e5       	ldi	r30, 0x55	; 85
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	84 60       	ori	r24, 0x04	; 4
    120a:	8c 93       	st	X, r24
    120c:	3d c0       	rjmp	.+122    	; 0x1288 <EXTI_statues+0x1a0>
				break;

			case rising_edge:
				MCUCR |= (3<<2);
    120e:	a5 e5       	ldi	r26, 0x55	; 85
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e5 e5       	ldi	r30, 0x55	; 85
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8c 60       	ori	r24, 0x0C	; 12
    121a:	8c 93       	st	X, r24
    121c:	35 c0       	rjmp	.+106    	; 0x1288 <EXTI_statues+0x1a0>
				break;

			case falling_edge:
				MCUCR |= (2<<2);
    121e:	a5 e5       	ldi	r26, 0x55	; 85
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e5       	ldi	r30, 0x55	; 85
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	88 60       	ori	r24, 0x08	; 8
    122a:	8c 93       	st	X, r24
    122c:	2d c0       	rjmp	.+90     	; 0x1288 <EXTI_statues+0x1a0>
				break;
			default : error_state = ES_OUT_OF_RANGE;
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	2a c0       	rjmp	.+84     	; 0x1288 <EXTI_statues+0x1a0>
			}
		else if(copy_A ->EXTI_pin == EXTI2)
    1234:	ea 81       	ldd	r30, Y+2	; 0x02
    1236:	fb 81       	ldd	r31, Y+3	; 0x03
    1238:	80 81       	ld	r24, Z
    123a:	82 30       	cpi	r24, 0x02	; 2
    123c:	19 f5       	brne	.+70     	; 0x1284 <EXTI_statues+0x19c>
			switch(status){
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3e 83       	std	Y+6, r19	; 0x06
    1246:	2d 83       	std	Y+5, r18	; 0x05
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	8d 30       	cpi	r24, 0x0D	; 13
    124e:	91 05       	cpc	r25, r1
    1250:	31 f0       	breq	.+12     	; 0x125e <EXTI_statues+0x176>
    1252:	2d 81       	ldd	r18, Y+5	; 0x05
    1254:	3e 81       	ldd	r19, Y+6	; 0x06
    1256:	2e 30       	cpi	r18, 0x0E	; 14
    1258:	31 05       	cpc	r19, r1
    125a:	49 f0       	breq	.+18     	; 0x126e <EXTI_statues+0x186>
    125c:	10 c0       	rjmp	.+32     	; 0x127e <EXTI_statues+0x196>

			case rising_edge:
				MCUCSR |= (1<<6);
    125e:	a4 e5       	ldi	r26, 0x54	; 84
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e4 e5       	ldi	r30, 0x54	; 84
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 64       	ori	r24, 0x40	; 64
    126a:	8c 93       	st	X, r24
    126c:	0d c0       	rjmp	.+26     	; 0x1288 <EXTI_statues+0x1a0>
				break;

			case falling_edge:
				MCUCSR &=~ (1<<6);
    126e:	a4 e5       	ldi	r26, 0x54	; 84
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e4 e5       	ldi	r30, 0x54	; 84
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 7b       	andi	r24, 0xBF	; 191
    127a:	8c 93       	st	X, r24
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <EXTI_statues+0x1a0>
				break;
			default : error_state = ES_OUT_OF_RANGE;
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <EXTI_statues+0x1a0>
			}
			else error_state = ES_OUT_OF_RANGE;
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	89 83       	std	Y+1, r24	; 0x01

		return error_state;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
}
    128a:	2a 96       	adiw	r28, 0x0a	; 10
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <callback_EXTI0>:
			GIFR &=~ (1<<6);
		else
				{error_state = ES_OUT_OF_RANGE;
} */

void callback_EXTI0 (void(*ptr_callback)(void)){
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <callback_EXTI0+0x6>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01

		ptr_globalEXTI[0] = ptr_callback;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	90 93 07 02 	sts	0x0207, r25
    12b2:	80 93 06 02 	sts	0x0206, r24
	}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <callback_EXTI1>:

void callback_EXTI1 (void(*ptr_callback)(void)){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <callback_EXTI1+0x6>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01

		ptr_globalEXTI[1] = ptr_callback;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	90 93 09 02 	sts	0x0209, r25
    12d6:	80 93 08 02 	sts	0x0208, r24
	}
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <callback_EXTI2>:

void callback_EXTI2 (void(*ptr_callback)(void)){
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <callback_EXTI2+0x6>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01

		ptr_globalEXTI[2] = ptr_callback;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	90 93 0b 02 	sts	0x020B, r25
    12fa:	80 93 0a 02 	sts	0x020A, r24
	}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <__vector_1>:

	void __vector_1(void)__attribute__((signal));
	void __vector_2(void)__attribute__((signal));
	void __vector_3(void)__attribute__((signal));

void __vector_1(void){
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	2f 93       	push	r18
    1314:	3f 93       	push	r19
    1316:	4f 93       	push	r20
    1318:	5f 93       	push	r21
    131a:	6f 93       	push	r22
    131c:	7f 93       	push	r23
    131e:	8f 93       	push	r24
    1320:	9f 93       	push	r25
    1322:	af 93       	push	r26
    1324:	bf 93       	push	r27
    1326:	ef 93       	push	r30
    1328:	ff 93       	push	r31
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	if(ptr_globalEXTI[0] != NULL)
    1332:	80 91 06 02 	lds	r24, 0x0206
    1336:	90 91 07 02 	lds	r25, 0x0207
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	29 f0       	breq	.+10     	; 0x1348 <__vector_1+0x40>
	ptr_globalEXTI[0]();
    133e:	e0 91 06 02 	lds	r30, 0x0206
    1342:	f0 91 07 02 	lds	r31, 0x0207
    1346:	09 95       	icall
}
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_2>:

void __vector_2(void){
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	if(ptr_globalEXTI[1] != NULL)
    1398:	80 91 08 02 	lds	r24, 0x0208
    139c:	90 91 09 02 	lds	r25, 0x0209
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	29 f0       	breq	.+10     	; 0x13ae <__vector_2+0x40>
	ptr_globalEXTI[1]();
    13a4:	e0 91 08 02 	lds	r30, 0x0208
    13a8:	f0 91 09 02 	lds	r31, 0x0209
    13ac:	09 95       	icall
}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	ff 91       	pop	r31
    13b4:	ef 91       	pop	r30
    13b6:	bf 91       	pop	r27
    13b8:	af 91       	pop	r26
    13ba:	9f 91       	pop	r25
    13bc:	8f 91       	pop	r24
    13be:	7f 91       	pop	r23
    13c0:	6f 91       	pop	r22
    13c2:	5f 91       	pop	r21
    13c4:	4f 91       	pop	r20
    13c6:	3f 91       	pop	r19
    13c8:	2f 91       	pop	r18
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <__vector_3>:
void __vector_3(void){
    13d4:	1f 92       	push	r1
    13d6:	0f 92       	push	r0
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	0f 92       	push	r0
    13dc:	11 24       	eor	r1, r1
    13de:	2f 93       	push	r18
    13e0:	3f 93       	push	r19
    13e2:	4f 93       	push	r20
    13e4:	5f 93       	push	r21
    13e6:	6f 93       	push	r22
    13e8:	7f 93       	push	r23
    13ea:	8f 93       	push	r24
    13ec:	9f 93       	push	r25
    13ee:	af 93       	push	r26
    13f0:	bf 93       	push	r27
    13f2:	ef 93       	push	r30
    13f4:	ff 93       	push	r31
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
	if(ptr_globalEXTI[2] != NULL)
    13fe:	80 91 0a 02 	lds	r24, 0x020A
    1402:	90 91 0b 02 	lds	r25, 0x020B
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	29 f0       	breq	.+10     	; 0x1414 <__vector_3+0x40>
	ptr_globalEXTI[2]();
    140a:	e0 91 0a 02 	lds	r30, 0x020A
    140e:	f0 91 0b 02 	lds	r31, 0x020B
    1412:	09 95       	icall
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	ff 91       	pop	r31
    141a:	ef 91       	pop	r30
    141c:	bf 91       	pop	r27
    141e:	af 91       	pop	r26
    1420:	9f 91       	pop	r25
    1422:	8f 91       	pop	r24
    1424:	7f 91       	pop	r23
    1426:	6f 91       	pop	r22
    1428:	5f 91       	pop	r21
    142a:	4f 91       	pop	r20
    142c:	3f 91       	pop	r19
    142e:	2f 91       	pop	r18
    1430:	0f 90       	pop	r0
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	0f 90       	pop	r0
    1436:	1f 90       	pop	r1
    1438:	18 95       	reti

0000143a <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01

#if DIO_u8PA0DIR == DIO_u8INPUT
	DDRA &= ~(1<<0);
    1448:	aa e3       	ldi	r26, 0x3A	; 58
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ea e3       	ldi	r30, 0x3A	; 58
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	8e 7f       	andi	r24, 0xFE	; 254
    1454:	8c 93       	st	X, r24
	DDRA |= (1<<0);
#else
#error "Direction of PA0 is wrong"
#endif

	return Local_enuErrorState;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
}
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <DIO_enuSetPinDirection+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <DIO_enuSetPinDirection+0x8>
    1468:	00 d0       	rcall	.+0      	; 0x146a <DIO_enuSetPinDirection+0xa>
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	8a 83       	std	Y+2, r24	; 0x02
    1470:	6b 83       	std	Y+3, r22	; 0x03
    1472:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	84 30       	cpi	r24, 0x04	; 4
    147c:	08 f0       	brcs	.+2      	; 0x1480 <DIO_enuSetPinDirection+0x20>
    147e:	d0 c0       	rjmp	.+416    	; 0x1620 <DIO_enuSetPinDirection+0x1c0>
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 30       	cpi	r24, 0x08	; 8
    1484:	08 f0       	brcs	.+2      	; 0x1488 <DIO_enuSetPinDirection+0x28>
    1486:	cc c0       	rjmp	.+408    	; 0x1620 <DIO_enuSetPinDirection+0x1c0>
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	08 f0       	brcs	.+2      	; 0x1490 <DIO_enuSetPinDirection+0x30>
    148e:	c8 c0       	rjmp	.+400    	; 0x1620 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID<= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3e 83       	std	Y+6, r19	; 0x06
    1498:	2d 83       	std	Y+5, r18	; 0x05
    149a:	6d 81       	ldd	r22, Y+5	; 0x05
    149c:	7e 81       	ldd	r23, Y+6	; 0x06
    149e:	61 30       	cpi	r22, 0x01	; 1
    14a0:	71 05       	cpc	r23, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <DIO_enuSetPinDirection+0x46>
    14a4:	41 c0       	rjmp	.+130    	; 0x1528 <DIO_enuSetPinDirection+0xc8>
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	91 05       	cpc	r25, r1
    14ae:	34 f4       	brge	.+12     	; 0x14bc <DIO_enuSetPinDirection+0x5c>
    14b0:	2d 81       	ldd	r18, Y+5	; 0x05
    14b2:	3e 81       	ldd	r19, Y+6	; 0x06
    14b4:	21 15       	cp	r18, r1
    14b6:	31 05       	cpc	r19, r1
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <DIO_enuSetPinDirection+0x76>
    14ba:	b0 c0       	rjmp	.+352    	; 0x161c <DIO_enuSetPinDirection+0x1bc>
    14bc:	6d 81       	ldd	r22, Y+5	; 0x05
    14be:	7e 81       	ldd	r23, Y+6	; 0x06
    14c0:	62 30       	cpi	r22, 0x02	; 2
    14c2:	71 05       	cpc	r23, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <DIO_enuSetPinDirection+0x68>
    14c6:	59 c0       	rjmp	.+178    	; 0x157a <DIO_enuSetPinDirection+0x11a>
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <DIO_enuSetPinDirection+0x74>
    14d2:	7c c0       	rjmp	.+248    	; 0x15cc <DIO_enuSetPinDirection+0x16c>
    14d4:	a3 c0       	rjmp	.+326    	; 0x161c <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK << Copy_u8PinID);
    14d6:	aa e3       	ldi	r26, 0x3A	; 58
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ea e3       	ldi	r30, 0x3A	; 58
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_enuSetPinDirection+0x92>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	2a 95       	dec	r18
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_enuSetPinDirection+0x8e>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction << Copy_u8PinID);
    14fc:	aa e3       	ldi	r26, 0x3A	; 58
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ea e3       	ldi	r30, 0x3A	; 58
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	b9 01       	movw	r22, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_enuSetPinDirection+0xbc>
    1518:	66 0f       	add	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_enuSetPinDirection+0xb8>
    1520:	cb 01       	movw	r24, r22
    1522:	84 2b       	or	r24, r20
    1524:	8c 93       	st	X, r24
    1526:	7a c0       	rjmp	.+244    	; 0x161c <DIO_enuSetPinDirection+0x1bc>
			break;

		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK << Copy_u8PinID);
    1528:	a7 e3       	ldi	r26, 0x37	; 55
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e7 e3       	ldi	r30, 0x37	; 55
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_enuSetPinDirection+0xe4>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	2a 95       	dec	r18
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_enuSetPinDirection+0xe0>
    1548:	80 95       	com	r24
    154a:	84 23       	and	r24, r20
    154c:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction << Copy_u8PinID);
    154e:	a7 e3       	ldi	r26, 0x37	; 55
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e7 e3       	ldi	r30, 0x37	; 55
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	b9 01       	movw	r22, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_enuSetPinDirection+0x10e>
    156a:	66 0f       	add	r22, r22
    156c:	77 1f       	adc	r23, r23
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_enuSetPinDirection+0x10a>
    1572:	cb 01       	movw	r24, r22
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	51 c0       	rjmp	.+162    	; 0x161c <DIO_enuSetPinDirection+0x1bc>

			break;

		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK << Copy_u8PinID);
    157a:	a4 e3       	ldi	r26, 0x34	; 52
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e4 e3       	ldi	r30, 0x34	; 52
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_enuSetPinDirection+0x136>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	2a 95       	dec	r18
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_enuSetPinDirection+0x132>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction << Copy_u8PinID);
    15a0:	a4 e3       	ldi	r26, 0x34	; 52
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e4 e3       	ldi	r30, 0x34	; 52
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	b9 01       	movw	r22, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_enuSetPinDirection+0x160>
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	8a 95       	dec	r24
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_enuSetPinDirection+0x15c>
    15c4:	cb 01       	movw	r24, r22
    15c6:	84 2b       	or	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	28 c0       	rjmp	.+80     	; 0x161c <DIO_enuSetPinDirection+0x1bc>

			break;

		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinID);
    15cc:	a1 e3       	ldi	r26, 0x31	; 49
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e1 e3       	ldi	r30, 0x31	; 49
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_enuSetPinDirection+0x188>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	2a 95       	dec	r18
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_enuSetPinDirection+0x184>
    15ec:	80 95       	com	r24
    15ee:	84 23       	and	r24, r20
    15f0:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction << Copy_u8PinID);
    15f2:	a1 e3       	ldi	r26, 0x31	; 49
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e1 e3       	ldi	r30, 0x31	; 49
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	b9 01       	movw	r22, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_enuSetPinDirection+0x1b2>
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	8a 95       	dec	r24
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_enuSetPinDirection+0x1ae>
    1616:	cb 01       	movw	r24, r22
    1618:	84 2b       	or	r24, r20
    161a:	8c 93       	st	X, r24

			break;

		}

		Local_enuErrorState = ES_OK;
    161c:	19 82       	std	Y+1, r1	; 0x01
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
}
    1626:	26 96       	adiw	r28, 0x06	; 6
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_enuSetPinValue+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_enuSetPinValue+0x8>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <DIO_enuSetPinValue+0xa>
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	6b 83       	std	Y+3, r22	; 0x03
    164a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	08 f0       	brcs	.+2      	; 0x1658 <DIO_enuSetPinValue+0x20>
    1656:	d0 c0       	rjmp	.+416    	; 0x17f8 <DIO_enuSetPinValue+0x1c0>
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 30       	cpi	r24, 0x08	; 8
    165c:	08 f0       	brcs	.+2      	; 0x1660 <DIO_enuSetPinValue+0x28>
    165e:	cc c0       	rjmp	.+408    	; 0x17f8 <DIO_enuSetPinValue+0x1c0>
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	08 f0       	brcs	.+2      	; 0x1668 <DIO_enuSetPinValue+0x30>
    1666:	c8 c0       	rjmp	.+400    	; 0x17f8 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Value <= DIO_u8HIGH)
	{
		switch (Copy_u8GroupID)
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3e 83       	std	Y+6, r19	; 0x06
    1670:	2d 83       	std	Y+5, r18	; 0x05
    1672:	6d 81       	ldd	r22, Y+5	; 0x05
    1674:	7e 81       	ldd	r23, Y+6	; 0x06
    1676:	61 30       	cpi	r22, 0x01	; 1
    1678:	71 05       	cpc	r23, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <DIO_enuSetPinValue+0x46>
    167c:	41 c0       	rjmp	.+130    	; 0x1700 <DIO_enuSetPinValue+0xc8>
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	82 30       	cpi	r24, 0x02	; 2
    1684:	91 05       	cpc	r25, r1
    1686:	34 f4       	brge	.+12     	; 0x1694 <DIO_enuSetPinValue+0x5c>
    1688:	2d 81       	ldd	r18, Y+5	; 0x05
    168a:	3e 81       	ldd	r19, Y+6	; 0x06
    168c:	21 15       	cp	r18, r1
    168e:	31 05       	cpc	r19, r1
    1690:	71 f0       	breq	.+28     	; 0x16ae <DIO_enuSetPinValue+0x76>
    1692:	b0 c0       	rjmp	.+352    	; 0x17f4 <DIO_enuSetPinValue+0x1bc>
    1694:	6d 81       	ldd	r22, Y+5	; 0x05
    1696:	7e 81       	ldd	r23, Y+6	; 0x06
    1698:	62 30       	cpi	r22, 0x02	; 2
    169a:	71 05       	cpc	r23, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <DIO_enuSetPinValue+0x68>
    169e:	59 c0       	rjmp	.+178    	; 0x1752 <DIO_enuSetPinValue+0x11a>
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	91 05       	cpc	r25, r1
    16a8:	09 f4       	brne	.+2      	; 0x16ac <DIO_enuSetPinValue+0x74>
    16aa:	7c c0       	rjmp	.+248    	; 0x17a4 <DIO_enuSetPinValue+0x16c>
    16ac:	a3 c0       	rjmp	.+326    	; 0x17f4 <DIO_enuSetPinValue+0x1bc>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK << Copy_u8PinID);
    16ae:	ab e3       	ldi	r26, 0x3B	; 59
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	eb e3       	ldi	r30, 0x3B	; 59
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_enuSetPinValue+0x92>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	2a 95       	dec	r18
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_enuSetPinValue+0x8e>
    16ce:	80 95       	com	r24
    16d0:	84 23       	and	r24, r20
    16d2:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    16d4:	ab e3       	ldi	r26, 0x3B	; 59
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e3       	ldi	r30, 0x3B	; 59
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	b9 01       	movw	r22, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_enuSetPinValue+0xbc>
    16f0:	66 0f       	add	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	8a 95       	dec	r24
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_enuSetPinValue+0xb8>
    16f8:	cb 01       	movw	r24, r22
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	7a c0       	rjmp	.+244    	; 0x17f4 <DIO_enuSetPinValue+0x1bc>
			break;

		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK << Copy_u8PinID);
    1700:	a8 e3       	ldi	r26, 0x38	; 56
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e8 e3       	ldi	r30, 0x38	; 56
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_enuSetPinValue+0xe4>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	2a 95       	dec	r18
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_enuSetPinValue+0xe0>
    1720:	80 95       	com	r24
    1722:	84 23       	and	r24, r20
    1724:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1726:	a8 e3       	ldi	r26, 0x38	; 56
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e8 e3       	ldi	r30, 0x38	; 56
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	b9 01       	movw	r22, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_enuSetPinValue+0x10e>
    1742:	66 0f       	add	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	8a 95       	dec	r24
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_enuSetPinValue+0x10a>
    174a:	cb 01       	movw	r24, r22
    174c:	84 2b       	or	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	51 c0       	rjmp	.+162    	; 0x17f4 <DIO_enuSetPinValue+0x1bc>

			break;

		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK << Copy_u8PinID);
    1752:	a5 e3       	ldi	r26, 0x35	; 53
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e3       	ldi	r30, 0x35	; 53
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_enuSetPinValue+0x136>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	2a 95       	dec	r18
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_enuSetPinValue+0x132>
    1772:	80 95       	com	r24
    1774:	84 23       	and	r24, r20
    1776:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1778:	a5 e3       	ldi	r26, 0x35	; 53
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e3       	ldi	r30, 0x35	; 53
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	88 2f       	mov	r24, r24
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	b9 01       	movw	r22, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_enuSetPinValue+0x160>
    1794:	66 0f       	add	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	8a 95       	dec	r24
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_enuSetPinValue+0x15c>
    179c:	cb 01       	movw	r24, r22
    179e:	84 2b       	or	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	28 c0       	rjmp	.+80     	; 0x17f4 <DIO_enuSetPinValue+0x1bc>

			break;

		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinID);
    17a4:	a2 e3       	ldi	r26, 0x32	; 50
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e2 e3       	ldi	r30, 0x32	; 50
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_enuSetPinValue+0x188>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	2a 95       	dec	r18
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_enuSetPinValue+0x184>
    17c4:	80 95       	com	r24
    17c6:	84 23       	and	r24, r20
    17c8:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    17ca:	a2 e3       	ldi	r26, 0x32	; 50
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e2 e3       	ldi	r30, 0x32	; 50
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	b9 01       	movw	r22, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_enuSetPinValue+0x1b2>
    17e6:	66 0f       	add	r22, r22
    17e8:	77 1f       	adc	r23, r23
    17ea:	8a 95       	dec	r24
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <DIO_enuSetPinValue+0x1ae>
    17ee:	cb 01       	movw	r24, r22
    17f0:	84 2b       	or	r24, r20
    17f2:	8c 93       	st	X, r24

			break;

		}

		Local_enuErrorState = ES_OK;
    17f4:	19 82       	std	Y+1, r1	; 0x01
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fe:	26 96       	adiw	r28, 0x06	; 6
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <DIO_enuTogglePinValue+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <DIO_enuTogglePinValue+0x8>
    1818:	0f 92       	push	r0
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	8a 83       	std	Y+2, r24	; 0x02
    1820:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	08 f0       	brcs	.+2      	; 0x182e <DIO_enuTogglePinValue+0x1e>
    182c:	74 c0       	rjmp	.+232    	; 0x1916 <DIO_enuTogglePinValue+0x106>
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	88 30       	cpi	r24, 0x08	; 8
    1832:	08 f0       	brcs	.+2      	; 0x1836 <DIO_enuTogglePinValue+0x26>
    1834:	70 c0       	rjmp	.+224    	; 0x1916 <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7 )
	{
		switch (Copy_u8GroupID)
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3d 83       	std	Y+5, r19	; 0x05
    183e:	2c 83       	std	Y+4, r18	; 0x04
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	49 f1       	breq	.+82     	; 0x189c <DIO_enuTogglePinValue+0x8c>
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <DIO_enuTogglePinValue+0x4e>
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	61 f0       	breq	.+24     	; 0x1874 <DIO_enuTogglePinValue+0x64>
    185c:	5a c0       	rjmp	.+180    	; 0x1912 <DIO_enuTogglePinValue+0x102>
    185e:	2c 81       	ldd	r18, Y+4	; 0x04
    1860:	3d 81       	ldd	r19, Y+5	; 0x05
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	71 f1       	breq	.+92     	; 0x18c4 <DIO_enuTogglePinValue+0xb4>
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	9d 81       	ldd	r25, Y+5	; 0x05
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	e9 f1       	breq	.+122    	; 0x18ec <DIO_enuTogglePinValue+0xdc>
    1872:	4f c0       	rjmp	.+158    	; 0x1912 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK << Copy_u8PinID);
    1874:	ab e3       	ldi	r26, 0x3B	; 59
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	eb e3       	ldi	r30, 0x3B	; 59
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	48 2f       	mov	r20, r24
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <DIO_enuTogglePinValue+0x82>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <DIO_enuTogglePinValue+0x7e>
    1896:	84 27       	eor	r24, r20
    1898:	8c 93       	st	X, r24
    189a:	3b c0       	rjmp	.+118    	; 0x1912 <DIO_enuTogglePinValue+0x102>
			break;

		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK << Copy_u8PinID);
    189c:	a8 e3       	ldi	r26, 0x38	; 56
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e8 e3       	ldi	r30, 0x38	; 56
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <DIO_enuTogglePinValue+0xaa>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <DIO_enuTogglePinValue+0xa6>
    18be:	84 27       	eor	r24, r20
    18c0:	8c 93       	st	X, r24
    18c2:	27 c0       	rjmp	.+78     	; 0x1912 <DIO_enuTogglePinValue+0x102>

			break;

		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK << Copy_u8PinID);
    18c4:	a5 e3       	ldi	r26, 0x35	; 53
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e5 e3       	ldi	r30, 0x35	; 53
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <DIO_enuTogglePinValue+0xd2>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <DIO_enuTogglePinValue+0xce>
    18e6:	84 27       	eor	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	13 c0       	rjmp	.+38     	; 0x1912 <DIO_enuTogglePinValue+0x102>

			break;

		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK << Copy_u8PinID);
    18ec:	a2 e3       	ldi	r26, 0x32	; 50
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e2 e3       	ldi	r30, 0x32	; 50
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <DIO_enuTogglePinValue+0xfa>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <DIO_enuTogglePinValue+0xf6>
    190e:	84 27       	eor	r24, r20
    1910:	8c 93       	st	X, r24

			break;

		}

		Local_enuErrorState = ES_OK;
    1912:	19 82       	std	Y+1, r1	; 0x01
    1914:	02 c0       	rjmp	.+4      	; 0x191a <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    191a:	89 81       	ldd	r24, Y+1	; 0x01
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_u8PinValue)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	27 97       	sbiw	r28, 0x07	; 7
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	8a 83       	std	Y+2, r24	; 0x02
    1942:	6b 83       	std	Y+3, r22	; 0x03
    1944:	5d 83       	std	Y+5, r21	; 0x05
    1946:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PinValue != NULL)
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9d 81       	ldd	r25, Y+5	; 0x05
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	09 f4       	brne	.+2      	; 0x1956 <DIO_enuGetPinValue+0x2a>
    1954:	7d c0       	rjmp	.+250    	; 0x1a50 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	08 f0       	brcs	.+2      	; 0x195e <DIO_enuGetPinValue+0x32>
    195c:	76 c0       	rjmp	.+236    	; 0x1a4a <DIO_enuGetPinValue+0x11e>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	08 f0       	brcs	.+2      	; 0x1966 <DIO_enuGetPinValue+0x3a>
    1964:	72 c0       	rjmp	.+228    	; 0x1a4a <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3f 83       	std	Y+7, r19	; 0x07
    196e:	2e 83       	std	Y+6, r18	; 0x06
    1970:	4e 81       	ldd	r20, Y+6	; 0x06
    1972:	5f 81       	ldd	r21, Y+7	; 0x07
    1974:	41 30       	cpi	r20, 0x01	; 1
    1976:	51 05       	cpc	r21, r1
    1978:	59 f1       	breq	.+86     	; 0x19d0 <DIO_enuGetPinValue+0xa4>
    197a:	8e 81       	ldd	r24, Y+6	; 0x06
    197c:	9f 81       	ldd	r25, Y+7	; 0x07
    197e:	82 30       	cpi	r24, 0x02	; 2
    1980:	91 05       	cpc	r25, r1
    1982:	34 f4       	brge	.+12     	; 0x1990 <DIO_enuGetPinValue+0x64>
    1984:	2e 81       	ldd	r18, Y+6	; 0x06
    1986:	3f 81       	ldd	r19, Y+7	; 0x07
    1988:	21 15       	cp	r18, r1
    198a:	31 05       	cpc	r19, r1
    198c:	69 f0       	breq	.+26     	; 0x19a8 <DIO_enuGetPinValue+0x7c>
    198e:	5b c0       	rjmp	.+182    	; 0x1a46 <DIO_enuGetPinValue+0x11a>
    1990:	4e 81       	ldd	r20, Y+6	; 0x06
    1992:	5f 81       	ldd	r21, Y+7	; 0x07
    1994:	42 30       	cpi	r20, 0x02	; 2
    1996:	51 05       	cpc	r21, r1
    1998:	79 f1       	breq	.+94     	; 0x19f8 <DIO_enuGetPinValue+0xcc>
    199a:	8e 81       	ldd	r24, Y+6	; 0x06
    199c:	9f 81       	ldd	r25, Y+7	; 0x07
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	91 05       	cpc	r25, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <DIO_enuGetPinValue+0x7a>
    19a4:	3d c0       	rjmp	.+122    	; 0x1a20 <DIO_enuGetPinValue+0xf4>
    19a6:	4f c0       	rjmp	.+158    	; 0x1a46 <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:

				*Copy_u8PinValue =  ((PINA >> Copy_u8PinID) & DIO_BIT_MASK);
    19a8:	e9 e3       	ldi	r30, 0x39	; 57
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a9 01       	movw	r20, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_enuGetPinValue+0x94>
    19bc:	55 95       	asr	r21
    19be:	47 95       	ror	r20
    19c0:	8a 95       	dec	r24
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_enuGetPinValue+0x90>
    19c4:	ca 01       	movw	r24, r20
    19c6:	81 70       	andi	r24, 0x01	; 1
    19c8:	ec 81       	ldd	r30, Y+4	; 0x04
    19ca:	fd 81       	ldd	r31, Y+5	; 0x05
    19cc:	80 83       	st	Z, r24
    19ce:	3b c0       	rjmp	.+118    	; 0x1a46 <DIO_enuGetPinValue+0x11a>

				break;

			case DIO_u8GROUP_B:

				*Copy_u8PinValue =  ((PINB >> Copy_u8PinID) & DIO_BIT_MASK);
    19d0:	e6 e3       	ldi	r30, 0x36	; 54
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a9 01       	movw	r20, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_enuGetPinValue+0xbc>
    19e4:	55 95       	asr	r21
    19e6:	47 95       	ror	r20
    19e8:	8a 95       	dec	r24
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_enuGetPinValue+0xb8>
    19ec:	ca 01       	movw	r24, r20
    19ee:	81 70       	andi	r24, 0x01	; 1
    19f0:	ec 81       	ldd	r30, Y+4	; 0x04
    19f2:	fd 81       	ldd	r31, Y+5	; 0x05
    19f4:	80 83       	st	Z, r24
    19f6:	27 c0       	rjmp	.+78     	; 0x1a46 <DIO_enuGetPinValue+0x11a>

				break;

			case DIO_u8GROUP_C:

				*Copy_u8PinValue =  ((PINC >> Copy_u8PinID) & DIO_BIT_MASK);
    19f8:	e3 e3       	ldi	r30, 0x33	; 51
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a9 01       	movw	r20, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_enuGetPinValue+0xe4>
    1a0c:	55 95       	asr	r21
    1a0e:	47 95       	ror	r20
    1a10:	8a 95       	dec	r24
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_enuGetPinValue+0xe0>
    1a14:	ca 01       	movw	r24, r20
    1a16:	81 70       	andi	r24, 0x01	; 1
    1a18:	ec 81       	ldd	r30, Y+4	; 0x04
    1a1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a1c:	80 83       	st	Z, r24
    1a1e:	13 c0       	rjmp	.+38     	; 0x1a46 <DIO_enuGetPinValue+0x11a>

				break;

			case DIO_u8GROUP_D:

				*Copy_u8PinValue =  ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);
    1a20:	e0 e3       	ldi	r30, 0x30	; 48
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_enuGetPinValue+0x10c>
    1a34:	55 95       	asr	r21
    1a36:	47 95       	ror	r20
    1a38:	8a 95       	dec	r24
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <DIO_enuGetPinValue+0x108>
    1a3c:	ca 01       	movw	r24, r20
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	ec 81       	ldd	r30, Y+4	; 0x04
    1a42:	fd 81       	ldd	r31, Y+5	; 0x05
    1a44:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    1a46:	19 82       	std	Y+1, r1	; 0x01
    1a48:	05 c0       	rjmp	.+10     	; 0x1a54 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1a4a:	82 e0       	ldi	r24, 0x02	; 2
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a56:	27 96       	adiw	r28, 0x07	; 7
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <ADC_INIT>:
#include "ADC_priv.h"

static void(*ptr_global)(void) = NULL;


ES_t ADC_INIT(void){
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	0f 92       	push	r0
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62

	u8 error_state = ES_OK;
    1a72:	19 82       	std	Y+1, r1	; 0x01

#if ADC_refrence == AREF_internal
	ADMUX &=~ (3<<6);

#elif ADC_refrence == AVCC_external
	ADMUX |= (1<<6);
    1a74:	a7 e2       	ldi	r26, 0x27	; 39
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e7 e2       	ldi	r30, 0x27	; 39
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 64       	ori	r24, 0x40	; 64
    1a80:	8c 93       	st	X, r24

#if ADC_Adjust == Right_Adjust
	ADMUX &=~ (1<<5);

#elif ADC_Adjust == Left_Adjust
	ADMUX |= (1<<5);
    1a82:	a7 e2       	ldi	r26, 0x27	; 39
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e7 e2       	ldi	r30, 0x27	; 39
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 62       	ori	r24, 0x20	; 32
    1a8e:	8c 93       	st	X, r24

#endif

#if PRESSCALER == 128
	ADCSRA |= (7<<0);
    1a90:	a6 e2       	ldi	r26, 0x26	; 38
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e6 e2       	ldi	r30, 0x26	; 38
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	87 60       	ori	r24, 0x07	; 7
    1a9c:	8c 93       	st	X, r24
#elif PRESSCALER == 64
	ADCSRA |= (6<<0);

#endif

	ADCSRA |= (1<<7);
    1a9e:	a6 e2       	ldi	r26, 0x26	; 38
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e6 e2       	ldi	r30, 0x26	; 38
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 68       	ori	r24, 0x80	; 128
    1aaa:	8c 93       	st	X, r24
	ADCSRA &=~ (1<<5);
    1aac:	a6 e2       	ldi	r26, 0x26	; 38
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e6 e2       	ldi	r30, 0x26	; 38
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8f 7d       	andi	r24, 0xDF	; 223
    1ab8:	8c 93       	st	X, r24

	return error_state;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <ADC_START_CONVERSION>:
ES_t ADC_START_CONVERSION(u8 CH){
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <ADC_START_CONVERSION+0x6>
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	8a 83       	std	Y+2, r24	; 0x02

	u8 error_state = ES_NOK;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	89 83       	std	Y+1, r24	; 0x01

if (CH <= 7 && CH >= 0) {
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	88 30       	cpi	r24, 0x08	; 8
    1ad8:	b8 f4       	brcc	.+46     	; 0x1b08 <ADC_START_CONVERSION+0x44>

	ADCSRA |= (1<<6);
    1ada:	a6 e2       	ldi	r26, 0x26	; 38
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e6 e2       	ldi	r30, 0x26	; 38
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 64       	ori	r24, 0x40	; 64
    1ae6:	8c 93       	st	X, r24
	ADMUX &=~ (7<<0);
    1ae8:	a7 e2       	ldi	r26, 0x27	; 39
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e7 e2       	ldi	r30, 0x27	; 39
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	88 7f       	andi	r24, 0xF8	; 248
    1af4:	8c 93       	st	X, r24
	ADMUX  |= (CH<<0);
    1af6:	a7 e2       	ldi	r26, 0x27	; 39
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e7 e2       	ldi	r30, 0x27	; 39
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	90 81       	ld	r25, Z
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	89 2b       	or	r24, r25
    1b04:	8c 93       	st	X, r24

	error_state = ES_OK;
    1b06:	19 82       	std	Y+1, r1	; 0x01
}

	return error_state;
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <ADC_GET_RESULT>:

ES_t ADC_GET_RESULT(u16 *RESULT){
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <ADC_GET_RESULT+0x6>
    1b1a:	0f 92       	push	r0
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	9b 83       	std	Y+3, r25	; 0x03
    1b22:	8a 83       	std	Y+2, r24	; 0x02

	u8 error_state = ES_NOK;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	89 83       	std	Y+1, r24	; 0x01
	*RESULT |= ((u16)ADCH<<8);
	error_state = ES_OK;
}
else if (ADC_Adjust == Left_Adjust){

	while((ADCSRA>>6)&1);
    1b28:	e6 e2       	ldi	r30, 0x26	; 38
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	82 95       	swap	r24
    1b30:	86 95       	lsr	r24
    1b32:	86 95       	lsr	r24
    1b34:	83 70       	andi	r24, 0x03	; 3
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	81 70       	andi	r24, 0x01	; 1
    1b3c:	90 70       	andi	r25, 0x00	; 0
    1b3e:	88 23       	and	r24, r24
    1b40:	99 f7       	brne	.-26     	; 0x1b28 <ADC_GET_RESULT+0x14>
	*RESULT = (ADCL >>6);
    1b42:	e4 e2       	ldi	r30, 0x24	; 36
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	82 95       	swap	r24
    1b4a:	86 95       	lsr	r24
    1b4c:	86 95       	lsr	r24
    1b4e:	83 70       	andi	r24, 0x03	; 3
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	80 83       	st	Z, r24
	*RESULT |= ((u16)ADCH<<2);
    1b5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b60:	20 81       	ld	r18, Z
    1b62:	31 81       	ldd	r19, Z+1	; 0x01
    1b64:	e5 e2       	ldi	r30, 0x25	; 37
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	82 2b       	or	r24, r18
    1b78:	93 2b       	or	r25, r19
    1b7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24

	error_state = ES_OK;
    1b82:	19 82       	std	Y+1, r1	; 0x01
}

else error_state = ES_OUT_OF_RANGE;

	return error_state;
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <ADC_SET_AUTO_TRIGGER>:

ES_t ADC_SET_AUTO_TRIGGER(u8 copy_source){
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <ADC_SET_AUTO_TRIGGER+0x6>
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	8a 83       	std	Y+2, r24	; 0x02

	u8 error_state = ES_NOK;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	89 83       	std	Y+1, r24	; 0x01

	if (copy_source <= 7 && copy_source >= 0){
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	88 30       	cpi	r24, 0x08	; 8
    1ba6:	50 f5       	brcc	.+84     	; 0x1bfc <ADC_SET_AUTO_TRIGGER+0x6a>
		ADCSRA &=~ (1<<5);
    1ba8:	a6 e2       	ldi	r26, 0x26	; 38
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e6 e2       	ldi	r30, 0x26	; 38
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8f 7d       	andi	r24, 0xDF	; 223
    1bb4:	8c 93       	st	X, r24
		ADCSRA  |= (1<<5);
    1bb6:	a6 e2       	ldi	r26, 0x26	; 38
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e6 e2       	ldi	r30, 0x26	; 38
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 62       	ori	r24, 0x20	; 32
    1bc2:	8c 93       	st	X, r24

		SFIOR  &=~ (7<<5);
    1bc4:	a0 e5       	ldi	r26, 0x50	; 80
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e0 e5       	ldi	r30, 0x50	; 80
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8f 71       	andi	r24, 0x1F	; 31
    1bd0:	8c 93       	st	X, r24
		SFIOR  |=  (copy_source << 5);
    1bd2:	a0 e5       	ldi	r26, 0x50	; 80
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e0 e5       	ldi	r30, 0x50	; 80
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	28 2f       	mov	r18, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	82 95       	swap	r24
    1bea:	92 95       	swap	r25
    1bec:	90 7f       	andi	r25, 0xF0	; 240
    1bee:	98 27       	eor	r25, r24
    1bf0:	80 7f       	andi	r24, 0xF0	; 240
    1bf2:	98 27       	eor	r25, r24
    1bf4:	82 2b       	or	r24, r18
    1bf6:	8c 93       	st	X, r24

		error_state = ES_OK;
    1bf8:	19 82       	std	Y+1, r1	; 0x01
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <ADC_SET_AUTO_TRIGGER+0x6e>
}

	else error_state = ES_OUT_OF_RANGE;
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	89 83       	std	Y+1, r24	; 0x01

		return error_state;
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <ADC_DISABLE_AUTO_TRIGGER>:
ES_t ADC_DISABLE_AUTO_TRIGGER(){
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62

	ADCSRA &=~ (1<<5);
    1c14:	a6 e2       	ldi	r26, 0x26	; 38
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e6 e2       	ldi	r30, 0x26	; 38
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8f 7d       	andi	r24, 0xDF	; 223
    1c20:	8c 93       	st	X, r24

		return ES_OK;
    1c22:	80 e0       	ldi	r24, 0x00	; 0
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <ADC_ENABlE_ENTRRUPT>:
ES_t ADC_ENABlE_ENTRRUPT(void){
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62

	ADCSRA &=~ (1<<3);
    1c32:	a6 e2       	ldi	r26, 0x26	; 38
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e6 e2       	ldi	r30, 0x26	; 38
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	87 7f       	andi	r24, 0xF7	; 247
    1c3e:	8c 93       	st	X, r24
	ADCSRA |=  (1<<3);
    1c40:	a6 e2       	ldi	r26, 0x26	; 38
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e6 e2       	ldi	r30, 0x26	; 38
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	88 60       	ori	r24, 0x08	; 8
    1c4c:	8c 93       	st	X, r24

		return ES_NOK;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
}
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <ADC_DISABlE_ENTRRUPT>:

ES_t ADC_DISABlE_ENTRRUPT(void){
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62

	ADCSRA &=~ (1<<3);
    1c5e:	a6 e2       	ldi	r26, 0x26	; 38
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e6 e2       	ldi	r30, 0x26	; 38
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	87 7f       	andi	r24, 0xF7	; 247
    1c6a:	8c 93       	st	X, r24

		return ES_NOK;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
}
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <ADC_call_back_fun>:

ES_t ADC_call_back_fun(void(*copy_fun)(void)){
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <ADC_call_back_fun+0x6>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01

	ptr_global = copy_fun;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	90 93 0d 02 	sts	0x020D, r25
    1c8a:	80 93 0c 02 	sts	0x020C, r24

	return ES_OK;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0

}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <void__victor_16>:
void__victor_16(void)__attribute__((signal));
void__victor_16(void){
    1c9a:	1f 92       	push	r1
    1c9c:	0f 92       	push	r0
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	0f 92       	push	r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	2f 93       	push	r18
    1ca6:	3f 93       	push	r19
    1ca8:	4f 93       	push	r20
    1caa:	5f 93       	push	r21
    1cac:	6f 93       	push	r22
    1cae:	7f 93       	push	r23
    1cb0:	8f 93       	push	r24
    1cb2:	9f 93       	push	r25
    1cb4:	af 93       	push	r26
    1cb6:	bf 93       	push	r27
    1cb8:	ef 93       	push	r30
    1cba:	ff 93       	push	r31
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <void__victor_16+0x28>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
	if(ptr_global != NULL)
    1cc6:	80 91 0c 02 	lds	r24, 0x020C
    1cca:	90 91 0d 02 	lds	r25, 0x020D
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	29 f0       	breq	.+10     	; 0x1cdc <void__victor_16+0x42>
	ptr_global();
    1cd2:	e0 91 0c 02 	lds	r30, 0x020C
    1cd6:	f0 91 0d 02 	lds	r31, 0x020D
    1cda:	09 95       	icall
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	ff 91       	pop	r31
    1ce6:	ef 91       	pop	r30
    1ce8:	bf 91       	pop	r27
    1cea:	af 91       	pop	r26
    1cec:	9f 91       	pop	r25
    1cee:	8f 91       	pop	r24
    1cf0:	7f 91       	pop	r23
    1cf2:	6f 91       	pop	r22
    1cf4:	5f 91       	pop	r21
    1cf6:	4f 91       	pop	r20
    1cf8:	3f 91       	pop	r19
    1cfa:	2f 91       	pop	r18
    1cfc:	0f 90       	pop	r0
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	0f 90       	pop	r0
    1d02:	1f 90       	pop	r1
    1d04:	18 95       	reti

00001d06 <LCD_enuwritelatch>:
#include "LCD_private.h"

#include <util/delay.h>


ES_t LCD_enuwritelatch(u8 Copy_u8Byte){
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	ea 97       	sbiw	r28, 0x3a	; 58
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	8a af       	std	Y+58, r24	; 0x3a

	u8 error_state = ES_NOK;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	89 af       	std	Y+57, r24	; 0x39

if (LCD_MODE == FOUR_BIT){

		DIO_enuSetPinValue(D7_GRP,D7_PIN,((Copy_u8Byte>>7)&1));
    1d20:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d22:	98 2f       	mov	r25, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	99 27       	eor	r25, r25
    1d28:	99 1f       	adc	r25, r25
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	67 e0       	ldi	r22, 0x07	; 7
    1d2e:	49 2f       	mov	r20, r25
    1d30:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_GRP,D6_PIN,((Copy_u8Byte>>6)&1));
    1d34:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d36:	82 95       	swap	r24
    1d38:	86 95       	lsr	r24
    1d3a:	86 95       	lsr	r24
    1d3c:	83 70       	andi	r24, 0x03	; 3
    1d3e:	98 2f       	mov	r25, r24
    1d40:	91 70       	andi	r25, 0x01	; 1
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	66 e0       	ldi	r22, 0x06	; 6
    1d46:	49 2f       	mov	r20, r25
    1d48:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_GRP,D5_PIN,((Copy_u8Byte>>5)&1));
    1d4c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d4e:	82 95       	swap	r24
    1d50:	86 95       	lsr	r24
    1d52:	87 70       	andi	r24, 0x07	; 7
    1d54:	98 2f       	mov	r25, r24
    1d56:	91 70       	andi	r25, 0x01	; 1
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	65 e0       	ldi	r22, 0x05	; 5
    1d5c:	49 2f       	mov	r20, r25
    1d5e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_GRP,D4_PIN,((Copy_u8Byte>>4)&1));
    1d62:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d64:	82 95       	swap	r24
    1d66:	8f 70       	andi	r24, 0x0F	; 15
    1d68:	98 2f       	mov	r25, r24
    1d6a:	91 70       	andi	r25, 0x01	; 1
    1d6c:	82 e0       	ldi	r24, 0x02	; 2
    1d6e:	64 e0       	ldi	r22, 0x04	; 4
    1d70:	49 2f       	mov	r20, r25
    1d72:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(EN_GRP,EN_PIN,DIO_u8HIGH);
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	63 e0       	ldi	r22, 0x03	; 3
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a0 ea       	ldi	r26, 0xA0	; 160
    1d86:	b0 e4       	ldi	r27, 0x40	; 64
    1d88:	8d ab       	std	Y+53, r24	; 0x35
    1d8a:	9e ab       	std	Y+54, r25	; 0x36
    1d8c:	af ab       	std	Y+55, r26	; 0x37
    1d8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	6d a9       	ldd	r22, Y+53	; 0x35
    1d92:	7e a9       	ldd	r23, Y+54	; 0x36
    1d94:	8f a9       	ldd	r24, Y+55	; 0x37
    1d96:	98 ad       	ldd	r25, Y+56	; 0x38
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a e7       	ldi	r20, 0x7A	; 122
    1d9e:	55 e4       	ldi	r21, 0x45	; 69
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	89 ab       	std	Y+49, r24	; 0x31
    1daa:	9a ab       	std	Y+50, r25	; 0x32
    1dac:	ab ab       	std	Y+51, r26	; 0x33
    1dae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1db0:	69 a9       	ldd	r22, Y+49	; 0x31
    1db2:	7a a9       	ldd	r23, Y+50	; 0x32
    1db4:	8b a9       	ldd	r24, Y+51	; 0x33
    1db6:	9c a9       	ldd	r25, Y+52	; 0x34
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <LCD_enuwritelatch+0xcc>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	98 ab       	std	Y+48, r25	; 0x30
    1dce:	8f a7       	std	Y+47, r24	; 0x2f
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <LCD_enuwritelatch+0x14a>
	else if (__tmp > 65535)
    1dd2:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd4:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd6:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	4c f5       	brge	.+82     	; 0x1e3c <LCD_enuwritelatch+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	6d a9       	ldd	r22, Y+53	; 0x35
    1dec:	7e a9       	ldd	r23, Y+54	; 0x36
    1dee:	8f a9       	ldd	r24, Y+55	; 0x37
    1df0:	98 ad       	ldd	r25, Y+56	; 0x38
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	98 ab       	std	Y+48, r25	; 0x30
    1e10:	8f a7       	std	Y+47, r24	; 0x2f
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <LCD_enuwritelatch+0x12c>
    1e14:	80 e9       	ldi	r24, 0x90	; 144
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	9e a7       	std	Y+46, r25	; 0x2e
    1e1a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_enuwritelatch+0x11a>
    1e24:	9e a7       	std	Y+46, r25	; 0x2e
    1e26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	98 ab       	std	Y+48, r25	; 0x30
    1e30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e34:	98 a9       	ldd	r25, Y+48	; 0x30
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <LCD_enuwritelatch+0x10e>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <LCD_enuwritelatch+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e40:	8b a9       	ldd	r24, Y+51	; 0x33
    1e42:	9c a9       	ldd	r25, Y+52	; 0x34
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	98 ab       	std	Y+48, r25	; 0x30
    1e4e:	8f a7       	std	Y+47, r24	; 0x2f
    1e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e52:	98 a9       	ldd	r25, Y+48	; 0x30
    1e54:	9c a7       	std	Y+44, r25	; 0x2c
    1e56:	8b a7       	std	Y+43, r24	; 0x2b
    1e58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_enuwritelatch+0x156>
    1e60:	9c a7       	std	Y+44, r25	; 0x2c
    1e62:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms (5);
		DIO_enuSetPinValue(EN_GRP,EN_PIN,DIO_u8LOW);
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	63 e0       	ldi	r22, 0x03	; 3
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 ea       	ldi	r26, 0xA0	; 160
    1e74:	b0 e4       	ldi	r27, 0x40	; 64
    1e76:	8f a3       	std	Y+39, r24	; 0x27
    1e78:	98 a7       	std	Y+40, r25	; 0x28
    1e7a:	a9 a7       	std	Y+41, r26	; 0x29
    1e7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e80:	78 a5       	ldd	r23, Y+40	; 0x28
    1e82:	89 a5       	ldd	r24, Y+41	; 0x29
    1e84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a e7       	ldi	r20, 0x7A	; 122
    1e8c:	55 e4       	ldi	r21, 0x45	; 69
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8b a3       	std	Y+35, r24	; 0x23
    1e98:	9c a3       	std	Y+36, r25	; 0x24
    1e9a:	ad a3       	std	Y+37, r26	; 0x25
    1e9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <LCD_enuwritelatch+0x1ba>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9a a3       	std	Y+34, r25	; 0x22
    1ebc:	89 a3       	std	Y+33, r24	; 0x21
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <LCD_enuwritelatch+0x238>
	else if (__tmp > 65535)
    1ec0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <LCD_enuwritelatch+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eda:	78 a5       	ldd	r23, Y+40	; 0x28
    1edc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ede:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9a a3       	std	Y+34, r25	; 0x22
    1efe:	89 a3       	std	Y+33, r24	; 0x21
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <LCD_enuwritelatch+0x21a>
    1f02:	80 e9       	ldi	r24, 0x90	; 144
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	98 a3       	std	Y+32, r25	; 0x20
    1f08:	8f 8f       	std	Y+31, r24	; 0x1f
    1f0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f0c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_enuwritelatch+0x208>
    1f12:	98 a3       	std	Y+32, r25	; 0x20
    1f14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	89 a1       	ldd	r24, Y+33	; 0x21
    1f18:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9a a3       	std	Y+34, r25	; 0x22
    1f1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	89 a1       	ldd	r24, Y+33	; 0x21
    1f22:	9a a1       	ldd	r25, Y+34	; 0x22
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <LCD_enuwritelatch+0x1fc>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <LCD_enuwritelatch+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f30:	9e a1       	ldd	r25, Y+38	; 0x26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9a a3       	std	Y+34, r25	; 0x22
    1f3c:	89 a3       	std	Y+33, r24	; 0x21
    1f3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f40:	9a a1       	ldd	r25, Y+34	; 0x22
    1f42:	9e 8f       	std	Y+30, r25	; 0x1e
    1f44:	8d 8f       	std	Y+29, r24	; 0x1d
    1f46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_enuwritelatch+0x244>
    1f4e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f50:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms (5);

		DIO_enuSetPinValue(D7_GRP,D7_PIN,((Copy_u8Byte>>3)&1));
    1f52:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f54:	86 95       	lsr	r24
    1f56:	86 95       	lsr	r24
    1f58:	86 95       	lsr	r24
    1f5a:	98 2f       	mov	r25, r24
    1f5c:	91 70       	andi	r25, 0x01	; 1
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	67 e0       	ldi	r22, 0x07	; 7
    1f62:	49 2f       	mov	r20, r25
    1f64:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_GRP,D6_PIN,((Copy_u8Byte>>2)&1));
    1f68:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f6a:	86 95       	lsr	r24
    1f6c:	86 95       	lsr	r24
    1f6e:	98 2f       	mov	r25, r24
    1f70:	91 70       	andi	r25, 0x01	; 1
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	66 e0       	ldi	r22, 0x06	; 6
    1f76:	49 2f       	mov	r20, r25
    1f78:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_GRP,D5_PIN,((Copy_u8Byte>>1)&1));
    1f7c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f7e:	86 95       	lsr	r24
    1f80:	98 2f       	mov	r25, r24
    1f82:	91 70       	andi	r25, 0x01	; 1
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	65 e0       	ldi	r22, 0x05	; 5
    1f88:	49 2f       	mov	r20, r25
    1f8a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_GRP,D4_PIN,((Copy_u8Byte>>0)&1));
    1f8e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f90:	98 2f       	mov	r25, r24
    1f92:	91 70       	andi	r25, 0x01	; 1
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	64 e0       	ldi	r22, 0x04	; 4
    1f98:	49 2f       	mov	r20, r25
    1f9a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(EN_GRP,EN_PIN,DIO_u8HIGH);
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	63 e0       	ldi	r22, 0x03	; 3
    1fa2:	41 e0       	ldi	r20, 0x01	; 1
    1fa4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a0 ea       	ldi	r26, 0xA0	; 160
    1fae:	b0 e4       	ldi	r27, 0x40	; 64
    1fb0:	89 8f       	std	Y+25, r24	; 0x19
    1fb2:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb4:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a e7       	ldi	r20, 0x7A	; 122
    1fc6:	55 e4       	ldi	r21, 0x45	; 69
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	8d 8b       	std	Y+21, r24	; 0x15
    1fd2:	9e 8b       	std	Y+22, r25	; 0x16
    1fd4:	af 8b       	std	Y+23, r26	; 0x17
    1fd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <LCD_enuwritelatch+0x2f4>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9c 8b       	std	Y+20, r25	; 0x14
    1ff6:	8b 8b       	std	Y+19, r24	; 0x13
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <LCD_enuwritelatch+0x372>
	else if (__tmp > 65535)
    1ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <LCD_enuwritelatch+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	69 8d       	ldd	r22, Y+25	; 0x19
    2014:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2016:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2018:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
    203a:	0f c0       	rjmp	.+30     	; 0x205a <LCD_enuwritelatch+0x354>
    203c:	80 e9       	ldi	r24, 0x90	; 144
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	9a 8b       	std	Y+18, r25	; 0x12
    2042:	89 8b       	std	Y+17, r24	; 0x11
    2044:	89 89       	ldd	r24, Y+17	; 0x11
    2046:	9a 89       	ldd	r25, Y+18	; 0x12
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_enuwritelatch+0x342>
    204c:	9a 8b       	std	Y+18, r25	; 0x12
    204e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	8b 89       	ldd	r24, Y+19	; 0x13
    2052:	9c 89       	ldd	r25, Y+20	; 0x14
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9c 8b       	std	Y+20, r25	; 0x14
    2058:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	8b 89       	ldd	r24, Y+19	; 0x13
    205c:	9c 89       	ldd	r25, Y+20	; 0x14
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f7       	brne	.-38     	; 0x203c <LCD_enuwritelatch+0x336>
    2062:	14 c0       	rjmp	.+40     	; 0x208c <LCD_enuwritelatch+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9c 8b       	std	Y+20, r25	; 0x14
    2076:	8b 8b       	std	Y+19, r24	; 0x13
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	98 8b       	std	Y+16, r25	; 0x10
    207e:	8f 87       	std	Y+15, r24	; 0x0f
    2080:	8f 85       	ldd	r24, Y+15	; 0x0f
    2082:	98 89       	ldd	r25, Y+16	; 0x10
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_enuwritelatch+0x37e>
    2088:	98 8b       	std	Y+16, r25	; 0x10
    208a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms (5);
		DIO_enuSetPinValue(EN_GRP,EN_PIN,DIO_u8LOW);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	63 e0       	ldi	r22, 0x03	; 3
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 ea       	ldi	r26, 0xA0	; 160
    209c:	b0 e4       	ldi	r27, 0x40	; 64
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	9c 87       	std	Y+12, r25	; 0x0c
    20a2:	ad 87       	std	Y+13, r26	; 0x0d
    20a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a e7       	ldi	r20, 0x7A	; 122
    20b4:	55 e4       	ldi	r21, 0x45	; 69
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8f 83       	std	Y+7, r24	; 0x07
    20c0:	98 87       	std	Y+8, r25	; 0x08
    20c2:	a9 87       	std	Y+9, r26	; 0x09
    20c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	78 85       	ldd	r23, Y+8	; 0x08
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20da:	88 23       	and	r24, r24
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <LCD_enuwritelatch+0x3e2>
		__ticks = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	3f c0       	rjmp	.+126    	; 0x2166 <LCD_enuwritelatch+0x460>
	else if (__tmp > 65535)
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	3f ef       	ldi	r19, 0xFF	; 255
    20f4:	4f e7       	ldi	r20, 0x7F	; 127
    20f6:	57 e4       	ldi	r21, 0x47	; 71
    20f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	4c f5       	brge	.+82     	; 0x2152 <LCD_enuwritelatch+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	6b 85       	ldd	r22, Y+11	; 0x0b
    2102:	7c 85       	ldd	r23, Y+12	; 0x0c
    2104:	8d 85       	ldd	r24, Y+13	; 0x0d
    2106:	9e 85       	ldd	r25, Y+14	; 0x0e
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e2       	ldi	r20, 0x20	; 32
    210e:	51 e4       	ldi	r21, 0x41	; 65
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <LCD_enuwritelatch+0x442>
    212a:	80 e9       	ldi	r24, 0x90	; 144
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	8b 83       	std	Y+3, r24	; 0x03
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_enuwritelatch+0x430>
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	69 f7       	brne	.-38     	; 0x212a <LCD_enuwritelatch+0x424>
    2150:	14 c0       	rjmp	.+40     	; 0x217a <LCD_enuwritelatch+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2152:	6f 81       	ldd	r22, Y+7	; 0x07
    2154:	78 85       	ldd	r23, Y+8	; 0x08
    2156:	89 85       	ldd	r24, Y+9	; 0x09
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <LCD_enuwritelatch+0x46c>
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (5);
		error_state = ES_OK;
    217a:	19 ae       	std	Y+57, r1	; 0x39
		_delay_ms (5);
		error_state = ES_OK;
}
else error_state = ES_OUT_OF_RANGE;

		return error_state;
    217c:	89 ad       	ldd	r24, Y+57	; 0x39
}
    217e:	ea 96       	adiw	r28, 0x3a	; 58
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <LCD_INIT>:

ES_t LCD_INIT(void){
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	e8 97       	sbiw	r28, 0x38	; 56
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	ac e0       	ldi	r26, 0x0C	; 12
    21aa:	b2 e4       	ldi	r27, 0x42	; 66
    21ac:	8d ab       	std	Y+53, r24	; 0x35
    21ae:	9e ab       	std	Y+54, r25	; 0x36
    21b0:	af ab       	std	Y+55, r26	; 0x37
    21b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b4:	6d a9       	ldd	r22, Y+53	; 0x35
    21b6:	7e a9       	ldd	r23, Y+54	; 0x36
    21b8:	8f a9       	ldd	r24, Y+55	; 0x37
    21ba:	98 ad       	ldd	r25, Y+56	; 0x38
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a e7       	ldi	r20, 0x7A	; 122
    21c2:	55 e4       	ldi	r21, 0x45	; 69
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	89 ab       	std	Y+49, r24	; 0x31
    21ce:	9a ab       	std	Y+50, r25	; 0x32
    21d0:	ab ab       	std	Y+51, r26	; 0x33
    21d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21d4:	69 a9       	ldd	r22, Y+49	; 0x31
    21d6:	7a a9       	ldd	r23, Y+50	; 0x32
    21d8:	8b a9       	ldd	r24, Y+51	; 0x33
    21da:	9c a9       	ldd	r25, Y+52	; 0x34
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <LCD_INIT+0x66>
		__ticks = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	98 ab       	std	Y+48, r25	; 0x30
    21f2:	8f a7       	std	Y+47, r24	; 0x2f
    21f4:	3f c0       	rjmp	.+126    	; 0x2274 <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    21f6:	69 a9       	ldd	r22, Y+49	; 0x31
    21f8:	7a a9       	ldd	r23, Y+50	; 0x32
    21fa:	8b a9       	ldd	r24, Y+51	; 0x33
    21fc:	9c a9       	ldd	r25, Y+52	; 0x34
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	3f ef       	ldi	r19, 0xFF	; 255
    2202:	4f e7       	ldi	r20, 0x7F	; 127
    2204:	57 e4       	ldi	r21, 0x47	; 71
    2206:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220a:	18 16       	cp	r1, r24
    220c:	4c f5       	brge	.+82     	; 0x2260 <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	6d a9       	ldd	r22, Y+53	; 0x35
    2210:	7e a9       	ldd	r23, Y+54	; 0x36
    2212:	8f a9       	ldd	r24, Y+55	; 0x37
    2214:	98 ad       	ldd	r25, Y+56	; 0x38
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e2       	ldi	r20, 0x20	; 32
    221c:	51 e4       	ldi	r21, 0x41	; 65
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	98 ab       	std	Y+48, r25	; 0x30
    2234:	8f a7       	std	Y+47, r24	; 0x2f
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <LCD_INIT+0xc6>
    2238:	80 e9       	ldi	r24, 0x90	; 144
    223a:	91 e0       	ldi	r25, 0x01	; 1
    223c:	9e a7       	std	Y+46, r25	; 0x2e
    223e:	8d a7       	std	Y+45, r24	; 0x2d
    2240:	8d a5       	ldd	r24, Y+45	; 0x2d
    2242:	9e a5       	ldd	r25, Y+46	; 0x2e
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_INIT+0xb4>
    2248:	9e a7       	std	Y+46, r25	; 0x2e
    224a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	8f a5       	ldd	r24, Y+47	; 0x2f
    224e:	98 a9       	ldd	r25, Y+48	; 0x30
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	98 ab       	std	Y+48, r25	; 0x30
    2254:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2256:	8f a5       	ldd	r24, Y+47	; 0x2f
    2258:	98 a9       	ldd	r25, Y+48	; 0x30
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	69 f7       	brne	.-38     	; 0x2238 <LCD_INIT+0xa8>
    225e:	14 c0       	rjmp	.+40     	; 0x2288 <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2260:	69 a9       	ldd	r22, Y+49	; 0x31
    2262:	7a a9       	ldd	r23, Y+50	; 0x32
    2264:	8b a9       	ldd	r24, Y+51	; 0x33
    2266:	9c a9       	ldd	r25, Y+52	; 0x34
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	98 ab       	std	Y+48, r25	; 0x30
    2272:	8f a7       	std	Y+47, r24	; 0x2f
    2274:	8f a5       	ldd	r24, Y+47	; 0x2f
    2276:	98 a9       	ldd	r25, Y+48	; 0x30
    2278:	9c a7       	std	Y+44, r25	; 0x2c
    227a:	8b a7       	std	Y+43, r24	; 0x2b
    227c:	8b a5       	ldd	r24, Y+43	; 0x2b
    227e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_INIT+0xf0>
    2284:	9c a7       	std	Y+44, r25	; 0x2c
    2286:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(35);
		DIO_enuSetPinDirection(RS_GRP,RS_PIN,DIO_u8OUTPUT);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	61 e0       	ldi	r22, 0x01	; 1
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(RW_GRP,RW_PIN,DIO_u8OUTPUT);
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	62 e0       	ldi	r22, 0x02	; 2
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(EN_GRP,EN_PIN,DIO_u8OUTPUT);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	63 e0       	ldi	r22, 0x03	; 3
    22a0:	41 e0       	ldi	r20, 0x01	; 1
    22a2:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_enuSetPinDirection>

		DIO_enuSetPinDirection(D7_GRP,D7_PIN,DIO_u8OUTPUT);
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	67 e0       	ldi	r22, 0x07	; 7
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D6_GRP,D6_PIN,DIO_u8OUTPUT);
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	66 e0       	ldi	r22, 0x06	; 6
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D5_GRP,D5_PIN,DIO_u8OUTPUT);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	65 e0       	ldi	r22, 0x05	; 5
    22be:	41 e0       	ldi	r20, 0x01	; 1
    22c0:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D4_GRP,D4_PIN,DIO_u8OUTPUT);
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	64 e0       	ldi	r22, 0x04	; 4
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_enuSetPinDirection>

		DIO_enuSetPinValue(RS_GRP,RS_PIN,DIO_u8LOW);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(RW_GRP,RW_PIN,DIO_u8LOW);
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	62 e0       	ldi	r22, 0x02	; 2
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(EN_GRP,EN_PIN,DIO_u8LOW);
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	63 e0       	ldi	r22, 0x03	; 3
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>


#if LCD_MODE == FOUR_BIT

			DIO_enuSetPinValue(D7_GRP , D7_PIN ,  0 );
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	67 e0       	ldi	r22, 0x07	; 7
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D6_GRP , D6_PIN ,  0 );
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	66 e0       	ldi	r22, 0x06	; 6
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D5_GRP , D5_PIN ,  1 );
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	65 e0       	ldi	r22, 0x05	; 5
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D4_GRP , D4_PIN ,  0 );
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	64 e0       	ldi	r22, 0x04	; 4
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>

			DIO_enuSetPinValue(EN_GRP , EN_PIN ,  DIO_u8HIGH );
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	63 e0       	ldi	r22, 0x03	; 3
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 ea       	ldi	r26, 0xA0	; 160
    2324:	b0 e4       	ldi	r27, 0x40	; 64
    2326:	8f a3       	std	Y+39, r24	; 0x27
    2328:	98 a7       	std	Y+40, r25	; 0x28
    232a:	a9 a7       	std	Y+41, r26	; 0x29
    232c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6f a1       	ldd	r22, Y+39	; 0x27
    2330:	78 a5       	ldd	r23, Y+40	; 0x28
    2332:	89 a5       	ldd	r24, Y+41	; 0x29
    2334:	9a a5       	ldd	r25, Y+42	; 0x2a
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a e7       	ldi	r20, 0x7A	; 122
    233c:	55 e4       	ldi	r21, 0x45	; 69
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8b a3       	std	Y+35, r24	; 0x23
    2348:	9c a3       	std	Y+36, r25	; 0x24
    234a:	ad a3       	std	Y+37, r26	; 0x25
    234c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    234e:	6b a1       	ldd	r22, Y+35	; 0x23
    2350:	7c a1       	ldd	r23, Y+36	; 0x24
    2352:	8d a1       	ldd	r24, Y+37	; 0x25
    2354:	9e a1       	ldd	r25, Y+38	; 0x26
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_INIT+0x1e0>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9a a3       	std	Y+34, r25	; 0x22
    236c:	89 a3       	std	Y+33, r24	; 0x21
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_INIT+0x25e>
	else if (__tmp > 65535)
    2370:	6b a1       	ldd	r22, Y+35	; 0x23
    2372:	7c a1       	ldd	r23, Y+36	; 0x24
    2374:	8d a1       	ldd	r24, Y+37	; 0x25
    2376:	9e a1       	ldd	r25, Y+38	; 0x26
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_INIT+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6f a1       	ldd	r22, Y+39	; 0x27
    238a:	78 a5       	ldd	r23, Y+40	; 0x28
    238c:	89 a5       	ldd	r24, Y+41	; 0x29
    238e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9a a3       	std	Y+34, r25	; 0x22
    23ae:	89 a3       	std	Y+33, r24	; 0x21
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_INIT+0x240>
    23b2:	80 e9       	ldi	r24, 0x90	; 144
    23b4:	91 e0       	ldi	r25, 0x01	; 1
    23b6:	98 a3       	std	Y+32, r25	; 0x20
    23b8:	8f 8f       	std	Y+31, r24	; 0x1f
    23ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23bc:	98 a1       	ldd	r25, Y+32	; 0x20
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_INIT+0x22e>
    23c2:	98 a3       	std	Y+32, r25	; 0x20
    23c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	89 a1       	ldd	r24, Y+33	; 0x21
    23c8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9a a3       	std	Y+34, r25	; 0x22
    23ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	89 a1       	ldd	r24, Y+33	; 0x21
    23d2:	9a a1       	ldd	r25, Y+34	; 0x22
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_INIT+0x222>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_INIT+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6b a1       	ldd	r22, Y+35	; 0x23
    23dc:	7c a1       	ldd	r23, Y+36	; 0x24
    23de:	8d a1       	ldd	r24, Y+37	; 0x25
    23e0:	9e a1       	ldd	r25, Y+38	; 0x26
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9a a3       	std	Y+34, r25	; 0x22
    23ec:	89 a3       	std	Y+33, r24	; 0x21
    23ee:	89 a1       	ldd	r24, Y+33	; 0x21
    23f0:	9a a1       	ldd	r25, Y+34	; 0x22
    23f2:	9e 8f       	std	Y+30, r25	; 0x1e
    23f4:	8d 8f       	std	Y+29, r24	; 0x1d
    23f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_INIT+0x26a>
    23fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2400:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms (5);
			DIO_enuSetPinValue(EN_GRP , EN_PIN ,  DIO_u8LOW );
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	63 e0       	ldi	r22, 0x03	; 3
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a0 ea       	ldi	r26, 0xA0	; 160
    2412:	b0 e4       	ldi	r27, 0x40	; 64
    2414:	89 8f       	std	Y+25, r24	; 0x19
    2416:	9a 8f       	std	Y+26, r25	; 0x1a
    2418:	ab 8f       	std	Y+27, r26	; 0x1b
    241a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241c:	69 8d       	ldd	r22, Y+25	; 0x19
    241e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2420:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2422:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	4a e7       	ldi	r20, 0x7A	; 122
    242a:	55 e4       	ldi	r21, 0x45	; 69
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	8d 8b       	std	Y+21, r24	; 0x15
    2436:	9e 8b       	std	Y+22, r25	; 0x16
    2438:	af 8b       	std	Y+23, r26	; 0x17
    243a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    243c:	6d 89       	ldd	r22, Y+21	; 0x15
    243e:	7e 89       	ldd	r23, Y+22	; 0x16
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e8       	ldi	r20, 0x80	; 128
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2450:	88 23       	and	r24, r24
    2452:	2c f4       	brge	.+10     	; 0x245e <LCD_INIT+0x2ce>
		__ticks = 1;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9c 8b       	std	Y+20, r25	; 0x14
    245a:	8b 8b       	std	Y+19, r24	; 0x13
    245c:	3f c0       	rjmp	.+126    	; 0x24dc <LCD_INIT+0x34c>
	else if (__tmp > 65535)
    245e:	6d 89       	ldd	r22, Y+21	; 0x15
    2460:	7e 89       	ldd	r23, Y+22	; 0x16
    2462:	8f 89       	ldd	r24, Y+23	; 0x17
    2464:	98 8d       	ldd	r25, Y+24	; 0x18
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	3f ef       	ldi	r19, 0xFF	; 255
    246a:	4f e7       	ldi	r20, 0x7F	; 127
    246c:	57 e4       	ldi	r21, 0x47	; 71
    246e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2472:	18 16       	cp	r1, r24
    2474:	4c f5       	brge	.+82     	; 0x24c8 <LCD_INIT+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2476:	69 8d       	ldd	r22, Y+25	; 0x19
    2478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e2       	ldi	r20, 0x20	; 32
    2484:	51 e4       	ldi	r21, 0x41	; 65
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9c 8b       	std	Y+20, r25	; 0x14
    249c:	8b 8b       	std	Y+19, r24	; 0x13
    249e:	0f c0       	rjmp	.+30     	; 0x24be <LCD_INIT+0x32e>
    24a0:	80 e9       	ldi	r24, 0x90	; 144
    24a2:	91 e0       	ldi	r25, 0x01	; 1
    24a4:	9a 8b       	std	Y+18, r25	; 0x12
    24a6:	89 8b       	std	Y+17, r24	; 0x11
    24a8:	89 89       	ldd	r24, Y+17	; 0x11
    24aa:	9a 89       	ldd	r25, Y+18	; 0x12
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_INIT+0x31c>
    24b0:	9a 8b       	std	Y+18, r25	; 0x12
    24b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b4:	8b 89       	ldd	r24, Y+19	; 0x13
    24b6:	9c 89       	ldd	r25, Y+20	; 0x14
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	9c 8b       	std	Y+20, r25	; 0x14
    24bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24be:	8b 89       	ldd	r24, Y+19	; 0x13
    24c0:	9c 89       	ldd	r25, Y+20	; 0x14
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	69 f7       	brne	.-38     	; 0x24a0 <LCD_INIT+0x310>
    24c6:	14 c0       	rjmp	.+40     	; 0x24f0 <LCD_INIT+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ca:	7e 89       	ldd	r23, Y+22	; 0x16
    24cc:	8f 89       	ldd	r24, Y+23	; 0x17
    24ce:	98 8d       	ldd	r25, Y+24	; 0x18
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	9c 8b       	std	Y+20, r25	; 0x14
    24da:	8b 8b       	std	Y+19, r24	; 0x13
    24dc:	8b 89       	ldd	r24, Y+19	; 0x13
    24de:	9c 89       	ldd	r25, Y+20	; 0x14
    24e0:	98 8b       	std	Y+16, r25	; 0x10
    24e2:	8f 87       	std	Y+15, r24	; 0x0f
    24e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e6:	98 89       	ldd	r25, Y+16	; 0x10
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <LCD_INIT+0x358>
    24ec:	98 8b       	std	Y+16, r25	; 0x10
    24ee:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms (5);
		LCD_enuwritelatch(0x28); // FOUR_BIT_MODE_SET
    24f0:	88 e2       	ldi	r24, 0x28	; 40
    24f2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_enuwritelatch>

#else
#error "LCD MODE IS WRONG"
#endif

		LCD_enuwritelatch(0x0f);   //display control
    24f6:	8f e0       	ldi	r24, 0x0F	; 15
    24f8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_enuwritelatch>
		LCD_enuwritelatch(0x01);   //clear
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_enuwritelatch>
		LCD_enuwritelatch(0x06);   //display set
    2502:	86 e0       	ldi	r24, 0x06	; 6
    2504:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_enuwritelatch>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a0 ea       	ldi	r26, 0xA0	; 160
    250e:	b0 e4       	ldi	r27, 0x40	; 64
    2510:	8b 87       	std	Y+11, r24	; 0x0b
    2512:	9c 87       	std	Y+12, r25	; 0x0c
    2514:	ad 87       	std	Y+13, r26	; 0x0d
    2516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6b 85       	ldd	r22, Y+11	; 0x0b
    251a:	7c 85       	ldd	r23, Y+12	; 0x0c
    251c:	8d 85       	ldd	r24, Y+13	; 0x0d
    251e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a e7       	ldi	r20, 0x7A	; 122
    2526:	55 e4       	ldi	r21, 0x45	; 69
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8f 83       	std	Y+7, r24	; 0x07
    2532:	98 87       	std	Y+8, r25	; 0x08
    2534:	a9 87       	std	Y+9, r26	; 0x09
    2536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <LCD_INIT+0x3ca>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <LCD_INIT+0x448>
	else if (__tmp > 65535)
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <LCD_INIT+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6b 85       	ldd	r22, Y+11	; 0x0b
    2574:	7c 85       	ldd	r23, Y+12	; 0x0c
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <LCD_INIT+0x42a>
    259c:	80 e9       	ldi	r24, 0x90	; 144
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	9c 83       	std	Y+4, r25	; 0x04
    25a2:	8b 83       	std	Y+3, r24	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_INIT+0x418>
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <LCD_INIT+0x40c>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <LCD_INIT+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <LCD_INIT+0x454>
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);

return ES_OK;
    25ec:	80 e0       	ldi	r24, 0x00	; 0

}
    25ee:	e8 96       	adiw	r28, 0x38	; 56
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <LCD_enusend_cmd>:

ES_t LCD_enusend_cmd(u8 copy_u8cmd){
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	0f 92       	push	r0
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	89 83       	std	Y+1, r24	; 0x01

	 DIO_enuSetPinValue(RS_GRP,RS_PIN,DIO_u8LOW);
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
     LCD_enuwritelatch(copy_u8cmd);
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_enuwritelatch>

     return ES_OK;
    261c:	80 e0       	ldi	r24, 0x00	; 0
}
    261e:	0f 90       	pop	r0
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <LCD_enusend_data>:
ES_t LCD_enusend_data(u8 copy_u8data){
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	0f 92       	push	r0
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	89 83       	std	Y+1, r24	; 0x01

      DIO_enuSetPinValue(RS_GRP,RS_PIN,DIO_u8HIGH);
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
      LCD_enuwritelatch(copy_u8data);
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_enuwritelatch>

      return ES_OK;
    2642:	80 e0       	ldi	r24, 0x00	; 0
}
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <LCD_enusend_string>:

ES_t LCD_enusend_string(const char *copy_string){
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <LCD_enusend_string+0x6>
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	10 c0       	rjmp	.+32     	; 0x267c <LCD_enusend_string+0x30>
		while(*copy_string){
	  DIO_enuSetPinValue(RS_GRP,RS_PIN,DIO_u8HIGH);
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	61 e0       	ldi	r22, 0x01	; 1
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
	  LCD_enuwritelatch(*copy_string++);
    2666:	e9 81       	ldd	r30, Y+1	; 0x01
    2668:	fa 81       	ldd	r31, Y+2	; 0x02
    266a:	20 81       	ld	r18, Z
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	01 96       	adiw	r24, 0x01	; 1
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	82 2f       	mov	r24, r18
    2678:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_enuwritelatch>

      return ES_OK;
}

ES_t LCD_enusend_string(const char *copy_string){
		while(*copy_string){
    267c:	e9 81       	ldd	r30, Y+1	; 0x01
    267e:	fa 81       	ldd	r31, Y+2	; 0x02
    2680:	80 81       	ld	r24, Z
    2682:	88 23       	and	r24, r24
    2684:	59 f7       	brne	.-42     	; 0x265c <LCD_enusend_string+0x10>
	  DIO_enuSetPinValue(RS_GRP,RS_PIN,DIO_u8HIGH);
	  LCD_enuwritelatch(*copy_string++);
		}
	  return ES_OK;
    2686:	80 e0       	ldi	r24, 0x00	; 0

}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <LCD_enuGoToPosition>:
ES_t LCD_enuGoToPosition(u8 Copy_u8Row , u8 Copy_u8Column){
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	00 d0       	rcall	.+0      	; 0x2698 <LCD_enuGoToPosition+0x6>
    2698:	0f 92       	push	r0
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	8a 83       	std	Y+2, r24	; 0x02
    26a0:	6b 83       	std	Y+3, r22	; 0x03

	ES_t error_state = ES_NOK;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_u8Row>0 && Copy_u8Row<=2 && Copy_u8Column>0 && Copy_u8Column<=16){
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	88 23       	and	r24, r24
    26aa:	11 f1       	breq	.+68     	; 0x26f0 <LCD_enuGoToPosition+0x5e>
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	83 30       	cpi	r24, 0x03	; 3
    26b0:	f8 f4       	brcc	.+62     	; 0x26f0 <LCD_enuGoToPosition+0x5e>
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	88 23       	and	r24, r24
    26b6:	e1 f0       	breq	.+56     	; 0x26f0 <LCD_enuGoToPosition+0x5e>
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	81 31       	cpi	r24, 0x11	; 17
    26bc:	c8 f4       	brcc	.+50     	; 0x26f0 <LCD_enuGoToPosition+0x5e>
			DIO_enuSetPinValue(RS_GRP,RS_PIN,DIO_u8LOW);
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	61 e0       	ldi	r22, 0x01	; 1
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_enuSetPinValue>
		    LCD_enuwritelatch((0x80)+(Copy_u8Column-1)+((0x40)*(Copy_u8Row-1)));
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	00 24       	eor	r0, r0
    26d2:	96 95       	lsr	r25
    26d4:	87 95       	ror	r24
    26d6:	07 94       	ror	r0
    26d8:	96 95       	lsr	r25
    26da:	87 95       	ror	r24
    26dc:	07 94       	ror	r0
    26de:	98 2f       	mov	r25, r24
    26e0:	80 2d       	mov	r24, r0
    26e2:	98 2f       	mov	r25, r24
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	89 0f       	add	r24, r25
    26e8:	81 58       	subi	r24, 0x81	; 129
    26ea:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_enuwritelatch>
		    error_state = ES_OK;
    26ee:	19 82       	std	Y+1, r1	; 0x01
	}
		return error_state;
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <LCD_enuSendIntegerNum>:
ES_t LCD_enuSendIntegerNum (u16 Copy_s16Num){
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	2e 97       	sbiw	r28, 0x0e	; 14
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	98 87       	std	Y+8, r25	; 0x08
    2714:	8f 83       	std	Y+7, r24	; 0x07
			copy_SPEC++;
			}
			LCD_enusend_data(0);

			return ES_OK;*/
}
    2716:	2d b7       	in	r18, 0x3d	; 61
    2718:	3e b7       	in	r19, 0x3e	; 62
    271a:	3e 87       	std	Y+14, r19	; 0x0e
    271c:	2d 87       	std	Y+13, r18	; 0x0d
	}
		return error_state;
}
ES_t LCD_enuSendIntegerNum (u16 Copy_s16Num){

	ES_t error_state = ES_NOK;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	8c 83       	std	Y+4, r24	; 0x04

		if(Copy_s16Num != 0){
    2722:	8f 81       	ldd	r24, Y+7	; 0x07
    2724:	98 85       	ldd	r25, Y+8	; 0x08
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	09 f4       	brne	.+2      	; 0x272c <LCD_enuSendIntegerNum+0x2e>
    272a:	7d c0       	rjmp	.+250    	; 0x2826 <LCD_enuSendIntegerNum+0x128>
    272c:	8d b7       	in	r24, 0x3d	; 61
    272e:	9e b7       	in	r25, 0x3e	; 62
    2730:	9a 87       	std	Y+10, r25	; 0x0a
    2732:	89 87       	std	Y+9, r24	; 0x09
			if(Copy_s16Num<0){
				Copy_s16Num = Copy_s16Num*-1;
			DIO_enuSetPinValue(RS_GRP,RS_PIN,DIO_u8HIGH);
						    LCD_enuwritelatch('-');
			}
				u8 digit=0;
    2734:	1b 82       	std	Y+3, r1	; 0x03
				s16 reminder = Copy_s16Num;
    2736:	8f 81       	ldd	r24, Y+7	; 0x07
    2738:	98 85       	ldd	r25, Y+8	; 0x08
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	0d c0       	rjmp	.+26     	; 0x275a <LCD_enuSendIntegerNum+0x5c>
				while(Copy_s16Num){
					Copy_s16Num /=10;
    2740:	8f 81       	ldd	r24, Y+7	; 0x07
    2742:	98 85       	ldd	r25, Y+8	; 0x08
    2744:	2a e0       	ldi	r18, 0x0A	; 10
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	b9 01       	movw	r22, r18
    274a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__udivmodhi4>
    274e:	cb 01       	movw	r24, r22
    2750:	98 87       	std	Y+8, r25	; 0x08
    2752:	8f 83       	std	Y+7, r24	; 0x07
						digit++;}
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	8f 5f       	subi	r24, 0xFF	; 255
    2758:	8b 83       	std	Y+3, r24	; 0x03
			DIO_enuSetPinValue(RS_GRP,RS_PIN,DIO_u8HIGH);
						    LCD_enuwritelatch('-');
			}
				u8 digit=0;
				s16 reminder = Copy_s16Num;
				while(Copy_s16Num){
    275a:	8f 81       	ldd	r24, Y+7	; 0x07
    275c:	98 85       	ldd	r25, Y+8	; 0x08
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	79 f7       	brne	.-34     	; 0x2740 <LCD_enuSendIntegerNum+0x42>
					Copy_s16Num /=10;
						digit++;}
				u8 int_num[digit];
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	88 2f       	mov	r24, r24
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	2d b7       	in	r18, 0x3d	; 61
    276a:	3e b7       	in	r19, 0x3e	; 62
    276c:	28 1b       	sub	r18, r24
    276e:	39 0b       	sbc	r19, r25
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	3e bf       	out	0x3e, r19	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	2d bf       	out	0x3d, r18	; 61
    277a:	8d b7       	in	r24, 0x3d	; 61
    277c:	9e b7       	in	r25, 0x3e	; 62
    277e:	01 96       	adiw	r24, 0x01	; 1
    2780:	9c 87       	std	Y+12, r25	; 0x0c
    2782:	8b 87       	std	Y+11, r24	; 0x0b
    2784:	8b 85       	ldd	r24, Y+11	; 0x0b
    2786:	9c 85       	ldd	r25, Y+12	; 0x0c
    2788:	00 96       	adiw	r24, 0x00	; 0
    278a:	9c 87       	std	Y+12, r25	; 0x0c
    278c:	8b 87       	std	Y+11, r24	; 0x0b
    278e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2790:	3c 85       	ldd	r19, Y+12	; 0x0c
    2792:	3e 83       	std	Y+6, r19	; 0x06
    2794:	2d 83       	std	Y+5, r18	; 0x05
    2796:	20 c0       	rjmp	.+64     	; 0x27d8 <LCD_enuSendIntegerNum+0xda>
			while(digit){
				int_num[digit-1]=reminder%10 +'0';
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	fc 01       	movw	r30, r24
    27a0:	31 97       	sbiw	r30, 0x01	; 1
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	2a e0       	ldi	r18, 0x0A	; 10
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	b9 01       	movw	r22, r18
    27ac:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__divmodhi4>
    27b0:	28 2f       	mov	r18, r24
    27b2:	20 5d       	subi	r18, 0xD0	; 208
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	e8 0f       	add	r30, r24
    27ba:	f9 1f       	adc	r31, r25
    27bc:	20 83       	st	Z, r18
				reminder/=10;
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	2a e0       	ldi	r18, 0x0A	; 10
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	b9 01       	movw	r22, r18
    27c8:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__divmodhi4>
    27cc:	cb 01       	movw	r24, r22
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
				digit--;
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	81 50       	subi	r24, 0x01	; 1
    27d6:	8b 83       	std	Y+3, r24	; 0x03
				s16 reminder = Copy_s16Num;
				while(Copy_s16Num){
					Copy_s16Num /=10;
						digit++;}
				u8 int_num[digit];
			while(digit){
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	88 23       	and	r24, r24
    27dc:	e9 f6       	brne	.-70     	; 0x2798 <LCD_enuSendIntegerNum+0x9a>
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <LCD_enuSendIntegerNum+0x100>
				int_num[digit-1]=reminder%10 +'0';
				reminder/=10;
				digit--;
			}
			while(int_num[digit]){
				LCD_enusend_data(int_num[digit++]);
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	fc 01       	movw	r30, r24
    27ec:	e2 0f       	add	r30, r18
    27ee:	f3 1f       	adc	r31, r19
    27f0:	90 81       	ld	r25, Z
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	8f 5f       	subi	r24, 0xFF	; 255
    27f6:	8b 83       	std	Y+3, r24	; 0x03
    27f8:	89 2f       	mov	r24, r25
    27fa:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_enusend_data>
			while(digit){
				int_num[digit-1]=reminder%10 +'0';
				reminder/=10;
				digit--;
			}
			while(int_num[digit]){
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	80 81       	ld	r24, Z
    2810:	88 23       	and	r24, r24
    2812:	31 f7       	brne	.-52     	; 0x27e0 <LCD_enuSendIntegerNum+0xe2>
				LCD_enusend_data(int_num[digit++]);
			}
			error_state = ES_OK;
    2814:	1c 82       	std	Y+4, r1	; 0x04
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	9e bf       	out	0x3e, r25	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	8d bf       	out	0x3d, r24	; 61
    2824:	04 c0       	rjmp	.+8      	; 0x282e <LCD_enuSendIntegerNum+0x130>
			}
			else {
				LCD_enusend_data('0');
    2826:	80 e3       	ldi	r24, 0x30	; 48
    2828:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_enusend_data>
			    error_state = ES_OK;
    282c:	1c 82       	std	Y+4, r1	; 0x04
			}
			return error_state;
    282e:	8c 81       	ldd	r24, Y+4	; 0x04
			copy_SPEC++;
			}
			LCD_enusend_data(0);

			return ES_OK;*/
}
    2830:	2d 85       	ldd	r18, Y+13	; 0x0d
    2832:	3e 85       	ldd	r19, Y+14	; 0x0e
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	3e bf       	out	0x3e, r19	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	2d bf       	out	0x3d, r18	; 61
    283e:	2e 96       	adiw	r28, 0x0e	; 14
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <main>:

#define Open      < 800
#define Hold      > 800


int main(){
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	c4 5a       	subi	r28, 0xA4	; 164
    285e:	d0 40       	sbci	r29, 0x00	; 0
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61

	u8 i;
	ADC_INIT();
    286a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <ADC_INIT>
	LCD_INIT();
    286e:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_INIT>
	LCD_enusend_cmd(0x0c);
    2872:	8c e0       	ldi	r24, 0x0C	; 12
    2874:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enusend_cmd>

	u16  THUMB,INDEX,MIDDLE,RING,LITTLE;

	char smile[]={ 0x00,0x00,0x0a,0x0a,0x00,0x11,0x0e,0x00};
    2878:	ce 01       	movw	r24, r28
    287a:	88 56       	subi	r24, 0x68	; 104
    287c:	9f 4f       	sbci	r25, 0xFF	; 255
    287e:	c0 56       	subi	r28, 0x60	; 96
    2880:	df 4f       	sbci	r29, 0xFF	; 255
    2882:	99 83       	std	Y+1, r25	; 0x01
    2884:	88 83       	st	Y, r24
    2886:	c0 5a       	subi	r28, 0xA0	; 160
    2888:	d0 40       	sbci	r29, 0x00	; 0
    288a:	8d ef       	ldi	r24, 0xFD	; 253
    288c:	91 e0       	ldi	r25, 0x01	; 1
    288e:	ce 55       	subi	r28, 0x5E	; 94
    2890:	df 4f       	sbci	r29, 0xFF	; 255
    2892:	99 83       	std	Y+1, r25	; 0x01
    2894:	88 83       	st	Y, r24
    2896:	c2 5a       	subi	r28, 0xA2	; 162
    2898:	d0 40       	sbci	r29, 0x00	; 0
    289a:	98 e0       	ldi	r25, 0x08	; 8
    289c:	cc 55       	subi	r28, 0x5C	; 92
    289e:	df 4f       	sbci	r29, 0xFF	; 255
    28a0:	98 83       	st	Y, r25
    28a2:	c4 5a       	subi	r28, 0xA4	; 164
    28a4:	d0 40       	sbci	r29, 0x00	; 0
    28a6:	ce 55       	subi	r28, 0x5E	; 94
    28a8:	df 4f       	sbci	r29, 0xFF	; 255
    28aa:	e8 81       	ld	r30, Y
    28ac:	f9 81       	ldd	r31, Y+1	; 0x01
    28ae:	c2 5a       	subi	r28, 0xA2	; 162
    28b0:	d0 40       	sbci	r29, 0x00	; 0
    28b2:	00 80       	ld	r0, Z
    28b4:	ce 55       	subi	r28, 0x5E	; 94
    28b6:	df 4f       	sbci	r29, 0xFF	; 255
    28b8:	88 81       	ld	r24, Y
    28ba:	99 81       	ldd	r25, Y+1	; 0x01
    28bc:	c2 5a       	subi	r28, 0xA2	; 162
    28be:	d0 40       	sbci	r29, 0x00	; 0
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	ce 55       	subi	r28, 0x5E	; 94
    28c4:	df 4f       	sbci	r29, 0xFF	; 255
    28c6:	99 83       	std	Y+1, r25	; 0x01
    28c8:	88 83       	st	Y, r24
    28ca:	c2 5a       	subi	r28, 0xA2	; 162
    28cc:	d0 40       	sbci	r29, 0x00	; 0
    28ce:	c0 56       	subi	r28, 0x60	; 96
    28d0:	df 4f       	sbci	r29, 0xFF	; 255
    28d2:	e8 81       	ld	r30, Y
    28d4:	f9 81       	ldd	r31, Y+1	; 0x01
    28d6:	c0 5a       	subi	r28, 0xA0	; 160
    28d8:	d0 40       	sbci	r29, 0x00	; 0
    28da:	00 82       	st	Z, r0
    28dc:	c0 56       	subi	r28, 0x60	; 96
    28de:	df 4f       	sbci	r29, 0xFF	; 255
    28e0:	88 81       	ld	r24, Y
    28e2:	99 81       	ldd	r25, Y+1	; 0x01
    28e4:	c0 5a       	subi	r28, 0xA0	; 160
    28e6:	d0 40       	sbci	r29, 0x00	; 0
    28e8:	01 96       	adiw	r24, 0x01	; 1
    28ea:	c0 56       	subi	r28, 0x60	; 96
    28ec:	df 4f       	sbci	r29, 0xFF	; 255
    28ee:	99 83       	std	Y+1, r25	; 0x01
    28f0:	88 83       	st	Y, r24
    28f2:	c0 5a       	subi	r28, 0xA0	; 160
    28f4:	d0 40       	sbci	r29, 0x00	; 0
    28f6:	cc 55       	subi	r28, 0x5C	; 92
    28f8:	df 4f       	sbci	r29, 0xFF	; 255
    28fa:	98 81       	ld	r25, Y
    28fc:	c4 5a       	subi	r28, 0xA4	; 164
    28fe:	d0 40       	sbci	r29, 0x00	; 0
    2900:	91 50       	subi	r25, 0x01	; 1
    2902:	cc 55       	subi	r28, 0x5C	; 92
    2904:	df 4f       	sbci	r29, 0xFF	; 255
    2906:	98 83       	st	Y, r25
    2908:	c4 5a       	subi	r28, 0xA4	; 164
    290a:	d0 40       	sbci	r29, 0x00	; 0
    290c:	cc 55       	subi	r28, 0x5C	; 92
    290e:	df 4f       	sbci	r29, 0xFF	; 255
    2910:	e8 81       	ld	r30, Y
    2912:	c4 5a       	subi	r28, 0xA4	; 164
    2914:	d0 40       	sbci	r29, 0x00	; 0
    2916:	ee 23       	and	r30, r30
    2918:	31 f6       	brne	.-116    	; 0x28a6 <main+0x56>

	LCD_enuGoToPosition(1,1);
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	61 e0       	ldi	r22, 0x01	; 1
    291e:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
	LCD_enusend_string("                  HELLO, SIR   ");
    2922:	80 e6       	ldi	r24, 0x60	; 96
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
	LCD_enusend_cmd(0x40);
    292a:	80 e4       	ldi	r24, 0x40	; 64
    292c:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enusend_cmd>

	for(i=0;i<8;i++)
    2930:	fe 01       	movw	r30, r28
    2932:	e3 57       	subi	r30, 0x73	; 115
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	10 82       	st	Z, r1
    2938:	18 c0       	rjmp	.+48     	; 0x296a <main+0x11a>
		LCD_enusend_data(smile[i]);
    293a:	fe 01       	movw	r30, r28
    293c:	e3 57       	subi	r30, 0x73	; 115
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	ce 01       	movw	r24, r28
    2948:	88 56       	subi	r24, 0x68	; 104
    294a:	9f 4f       	sbci	r25, 0xFF	; 255
    294c:	fc 01       	movw	r30, r24
    294e:	e2 0f       	add	r30, r18
    2950:	f3 1f       	adc	r31, r19
    2952:	80 81       	ld	r24, Z
    2954:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_enusend_data>

	LCD_enuGoToPosition(1,1);
	LCD_enusend_string("                  HELLO, SIR   ");
	LCD_enusend_cmd(0x40);

	for(i=0;i<8;i++)
    2958:	de 01       	movw	r26, r28
    295a:	a3 57       	subi	r26, 0x73	; 115
    295c:	bf 4f       	sbci	r27, 0xFF	; 255
    295e:	fe 01       	movw	r30, r28
    2960:	e3 57       	subi	r30, 0x73	; 115
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	8f 5f       	subi	r24, 0xFF	; 255
    2968:	8c 93       	st	X, r24
    296a:	fe 01       	movw	r30, r28
    296c:	e3 57       	subi	r30, 0x73	; 115
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	88 30       	cpi	r24, 0x08	; 8
    2974:	10 f3       	brcs	.-60     	; 0x293a <main+0xea>
		LCD_enusend_data(smile[i]);
	LCD_enuGoToPosition(1,31);
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	6f e1       	ldi	r22, 0x1F	; 31
    297a:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
	LCD_enusend_data(0);
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_enusend_data>
	LCD_enusend_cmd(0x80);
    2984:	80 e8       	ldi	r24, 0x80	; 128
    2986:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enusend_cmd>
	LCD_enuGoToPosition(2,1);
    298a:	82 e0       	ldi	r24, 0x02	; 2
    298c:	61 e0       	ldi	r22, 0x01	; 1
    298e:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
	LCD_enusend_string("                START YOUR SIGN");
    2992:	80 e8       	ldi	r24, 0x80	; 128
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
	for(i=0;i<15;i++){
    299a:	fe 01       	movw	r30, r28
    299c:	e3 57       	subi	r30, 0x73	; 115
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	10 82       	st	Z, r1
    29a2:	bf c0       	rjmp	.+382    	; 0x2b22 <main+0x2d2>
		LCD_enusend_cmd(0x18);
    29a4:	88 e1       	ldi	r24, 0x18	; 24
    29a6:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enusend_cmd>
    29aa:	fe 01       	movw	r30, r28
    29ac:	e7 57       	subi	r30, 0x77	; 119
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a8 e4       	ldi	r26, 0x48	; 72
    29b6:	b3 e4       	ldi	r27, 0x43	; 67
    29b8:	80 83       	st	Z, r24
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	a2 83       	std	Z+2, r26	; 0x02
    29be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c0:	8e 01       	movw	r16, r28
    29c2:	0b 57       	subi	r16, 0x7B	; 123
    29c4:	1f 4f       	sbci	r17, 0xFF	; 255
    29c6:	fe 01       	movw	r30, r28
    29c8:	e7 57       	subi	r30, 0x77	; 119
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	4a e7       	ldi	r20, 0x7A	; 122
    29da:	55 e4       	ldi	r21, 0x45	; 69
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	f8 01       	movw	r30, r16
    29e6:	80 83       	st	Z, r24
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	a2 83       	std	Z+2, r26	; 0x02
    29ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ee:	fe 01       	movw	r30, r28
    29f0:	eb 57       	subi	r30, 0x7B	; 123
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e8       	ldi	r20, 0x80	; 128
    2a02:	5f e3       	ldi	r21, 0x3F	; 63
    2a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a08:	88 23       	and	r24, r24
    2a0a:	44 f4       	brge	.+16     	; 0x2a1c <main+0x1cc>
		__ticks = 1;
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ed 57       	subi	r30, 0x7D	; 125
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	80 83       	st	Z, r24
    2a1a:	64 c0       	rjmp	.+200    	; 0x2ae4 <main+0x294>
	else if (__tmp > 65535)
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	eb 57       	subi	r30, 0x7B	; 123
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	3f ef       	ldi	r19, 0xFF	; 255
    2a2e:	4f e7       	ldi	r20, 0x7F	; 127
    2a30:	57 e4       	ldi	r21, 0x47	; 71
    2a32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a36:	18 16       	cp	r1, r24
    2a38:	0c f0       	brlt	.+2      	; 0x2a3c <main+0x1ec>
    2a3a:	43 c0       	rjmp	.+134    	; 0x2ac2 <main+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e7 57       	subi	r30, 0x77	; 119
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	60 81       	ld	r22, Z
    2a44:	71 81       	ldd	r23, Z+1	; 0x01
    2a46:	82 81       	ldd	r24, Z+2	; 0x02
    2a48:	93 81       	ldd	r25, Z+3	; 0x03
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e2       	ldi	r20, 0x20	; 32
    2a50:	51 e4       	ldi	r21, 0x41	; 65
    2a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	8e 01       	movw	r16, r28
    2a5c:	0d 57       	subi	r16, 0x7D	; 125
    2a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	f8 01       	movw	r30, r16
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	80 83       	st	Z, r24
    2a72:	1f c0       	rjmp	.+62     	; 0x2ab2 <main+0x262>
    2a74:	fe 01       	movw	r30, r28
    2a76:	ef 57       	subi	r30, 0x7F	; 127
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 e9       	ldi	r24, 0x90	; 144
    2a7c:	91 e0       	ldi	r25, 0x01	; 1
    2a7e:	91 83       	std	Z+1, r25	; 0x01
    2a80:	80 83       	st	Z, r24
    2a82:	fe 01       	movw	r30, r28
    2a84:	ef 57       	subi	r30, 0x7F	; 127
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <main+0x23c>
    2a90:	fe 01       	movw	r30, r28
    2a92:	ef 57       	subi	r30, 0x7F	; 127
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9a:	de 01       	movw	r26, r28
    2a9c:	ad 57       	subi	r26, 0x7D	; 125
    2a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ed 57       	subi	r30, 0x7D	; 125
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	11 96       	adiw	r26, 0x01	; 1
    2aae:	9c 93       	st	X, r25
    2ab0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	ed 57       	subi	r30, 0x7D	; 125
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	d1 f6       	brne	.-76     	; 0x2a74 <main+0x224>
    2ac0:	27 c0       	rjmp	.+78     	; 0x2b10 <main+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac2:	8e 01       	movw	r16, r28
    2ac4:	0d 57       	subi	r16, 0x7D	; 125
    2ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac8:	fe 01       	movw	r30, r28
    2aca:	eb 57       	subi	r30, 0x7B	; 123
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	f8 01       	movw	r30, r16
    2ae0:	91 83       	std	Z+1, r25	; 0x01
    2ae2:	80 83       	st	Z, r24
    2ae4:	de 01       	movw	r26, r28
    2ae6:	a1 58       	subi	r26, 0x81	; 129
    2ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aea:	fe 01       	movw	r30, r28
    2aec:	ed 57       	subi	r30, 0x7D	; 125
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	8d 93       	st	X+, r24
    2af6:	9c 93       	st	X, r25
    2af8:	fe 01       	movw	r30, r28
    2afa:	e1 58       	subi	r30, 0x81	; 129
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <main+0x2b2>
    2b06:	fe 01       	movw	r30, r28
    2b08:	e1 58       	subi	r30, 0x81	; 129
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	80 83       	st	Z, r24
	LCD_enuGoToPosition(1,31);
	LCD_enusend_data(0);
	LCD_enusend_cmd(0x80);
	LCD_enuGoToPosition(2,1);
	LCD_enusend_string("                START YOUR SIGN");
	for(i=0;i<15;i++){
    2b10:	de 01       	movw	r26, r28
    2b12:	a3 57       	subi	r26, 0x73	; 115
    2b14:	bf 4f       	sbci	r27, 0xFF	; 255
    2b16:	fe 01       	movw	r30, r28
    2b18:	e3 57       	subi	r30, 0x73	; 115
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	8f 5f       	subi	r24, 0xFF	; 255
    2b20:	8c 93       	st	X, r24
    2b22:	fe 01       	movw	r30, r28
    2b24:	e3 57       	subi	r30, 0x73	; 115
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	80 81       	ld	r24, Z
    2b2a:	8f 30       	cpi	r24, 0x0F	; 15
    2b2c:	08 f4       	brcc	.+2      	; 0x2b30 <main+0x2e0>
    2b2e:	3a cf       	rjmp	.-396    	; 0x29a4 <main+0x154>
    2b30:	fe 01       	movw	r30, r28
    2b32:	e5 58       	subi	r30, 0x85	; 133
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e4       	ldi	r25, 0x40	; 64
    2b3a:	ac e1       	ldi	r26, 0x1C	; 28
    2b3c:	b5 e4       	ldi	r27, 0x45	; 69
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	8e 01       	movw	r16, r28
    2b48:	09 58       	subi	r16, 0x89	; 137
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e5 58       	subi	r30, 0x85	; 133
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a e7       	ldi	r20, 0x7A	; 122
    2b60:	55 e4       	ldi	r21, 0x45	; 69
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 83       	st	Z, r24
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	a2 83       	std	Z+2, r26	; 0x02
    2b72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b74:	fe 01       	movw	r30, r28
    2b76:	e9 58       	subi	r30, 0x89	; 137
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	5f e3       	ldi	r21, 0x3F	; 63
    2b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	44 f4       	brge	.+16     	; 0x2ba2 <main+0x352>
		__ticks = 1;
    2b92:	fe 01       	movw	r30, r28
    2b94:	eb 58       	subi	r30, 0x8B	; 139
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
    2ba0:	64 c0       	rjmp	.+200    	; 0x2c6a <main+0x41a>
	else if (__tmp > 65535)
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e9 58       	subi	r30, 0x89	; 137
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	3f ef       	ldi	r19, 0xFF	; 255
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	57 e4       	ldi	r21, 0x47	; 71
    2bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	0c f0       	brlt	.+2      	; 0x2bc2 <main+0x372>
    2bc0:	43 c0       	rjmp	.+134    	; 0x2c48 <main+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e5 58       	subi	r30, 0x85	; 133
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e2       	ldi	r20, 0x20	; 32
    2bd6:	51 e4       	ldi	r21, 0x41	; 65
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	8e 01       	movw	r16, r28
    2be2:	0b 58       	subi	r16, 0x8B	; 139
    2be4:	1f 4f       	sbci	r17, 0xFF	; 255
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	80 83       	st	Z, r24
    2bf8:	1f c0       	rjmp	.+62     	; 0x2c38 <main+0x3e8>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ed 58       	subi	r30, 0x8D	; 141
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 e9       	ldi	r24, 0x90	; 144
    2c02:	91 e0       	ldi	r25, 0x01	; 1
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
    2c08:	fe 01       	movw	r30, r28
    2c0a:	ed 58       	subi	r30, 0x8D	; 141
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	91 81       	ldd	r25, Z+1	; 0x01
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <main+0x3c2>
    2c16:	fe 01       	movw	r30, r28
    2c18:	ed 58       	subi	r30, 0x8D	; 141
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	de 01       	movw	r26, r28
    2c22:	ab 58       	subi	r26, 0x8B	; 139
    2c24:	bf 4f       	sbci	r27, 0xFF	; 255
    2c26:	fe 01       	movw	r30, r28
    2c28:	eb 58       	subi	r30, 0x8B	; 139
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	11 96       	adiw	r26, 0x01	; 1
    2c34:	9c 93       	st	X, r25
    2c36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c38:	fe 01       	movw	r30, r28
    2c3a:	eb 58       	subi	r30, 0x8B	; 139
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	d1 f6       	brne	.-76     	; 0x2bfa <main+0x3aa>
    2c46:	28 c0       	rjmp	.+80     	; 0x2c98 <main+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c48:	8e 01       	movw	r16, r28
    2c4a:	0b 58       	subi	r16, 0x8B	; 139
    2c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e9 58       	subi	r30, 0x89	; 137
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	f8 01       	movw	r30, r16
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
    2c6a:	de 01       	movw	r26, r28
    2c6c:	af 58       	subi	r26, 0x8F	; 143
    2c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c70:	fe 01       	movw	r30, r28
    2c72:	eb 58       	subi	r30, 0x8B	; 139
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	11 96       	adiw	r26, 0x01	; 1
    2c7c:	9c 93       	st	X, r25
    2c7e:	8e 93       	st	-X, r24
    2c80:	fe 01       	movw	r30, r28
    2c82:	ef 58       	subi	r30, 0x8F	; 143
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <main+0x43a>
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ef 58       	subi	r30, 0x8F	; 143
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
		LCD_enusend_cmd(0x18);
			_delay_ms(200);
		}

	_delay_ms(2500);
	for(i=0;i<15;i++){
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e3 57       	subi	r30, 0x73	; 115
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	10 82       	st	Z, r1
    2ca0:	bf c0       	rjmp	.+382    	; 0x2e20 <main+0x5d0>
			LCD_enusend_cmd(0x18);
    2ca2:	88 e1       	ldi	r24, 0x18	; 24
    2ca4:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enusend_cmd>
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e3 59       	subi	r30, 0x93	; 147
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	a8 e4       	ldi	r26, 0x48	; 72
    2cb4:	b3 e4       	ldi	r27, 0x43	; 67
    2cb6:	80 83       	st	Z, r24
    2cb8:	91 83       	std	Z+1, r25	; 0x01
    2cba:	a2 83       	std	Z+2, r26	; 0x02
    2cbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbe:	8e 01       	movw	r16, r28
    2cc0:	07 59       	subi	r16, 0x97	; 151
    2cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e3 59       	subi	r30, 0x93	; 147
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	4a e7       	ldi	r20, 0x7A	; 122
    2cd8:	55 e4       	ldi	r21, 0x45	; 69
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	f8 01       	movw	r30, r16
    2ce4:	80 83       	st	Z, r24
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	a2 83       	std	Z+2, r26	; 0x02
    2cea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cec:	fe 01       	movw	r30, r28
    2cee:	e7 59       	subi	r30, 0x97	; 151
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e8       	ldi	r20, 0x80	; 128
    2d00:	5f e3       	ldi	r21, 0x3F	; 63
    2d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d06:	88 23       	and	r24, r24
    2d08:	44 f4       	brge	.+16     	; 0x2d1a <main+0x4ca>
		__ticks = 1;
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e9 59       	subi	r30, 0x99	; 153
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	91 83       	std	Z+1, r25	; 0x01
    2d16:	80 83       	st	Z, r24
    2d18:	64 c0       	rjmp	.+200    	; 0x2de2 <main+0x592>
	else if (__tmp > 65535)
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e7 59       	subi	r30, 0x97	; 151
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	60 81       	ld	r22, Z
    2d22:	71 81       	ldd	r23, Z+1	; 0x01
    2d24:	82 81       	ldd	r24, Z+2	; 0x02
    2d26:	93 81       	ldd	r25, Z+3	; 0x03
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	3f ef       	ldi	r19, 0xFF	; 255
    2d2c:	4f e7       	ldi	r20, 0x7F	; 127
    2d2e:	57 e4       	ldi	r21, 0x47	; 71
    2d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d34:	18 16       	cp	r1, r24
    2d36:	0c f0       	brlt	.+2      	; 0x2d3a <main+0x4ea>
    2d38:	43 c0       	rjmp	.+134    	; 0x2dc0 <main+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e3 59       	subi	r30, 0x93	; 147
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	60 81       	ld	r22, Z
    2d42:	71 81       	ldd	r23, Z+1	; 0x01
    2d44:	82 81       	ldd	r24, Z+2	; 0x02
    2d46:	93 81       	ldd	r25, Z+3	; 0x03
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e2       	ldi	r20, 0x20	; 32
    2d4e:	51 e4       	ldi	r21, 0x41	; 65
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	8e 01       	movw	r16, r28
    2d5a:	09 59       	subi	r16, 0x99	; 153
    2d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	f8 01       	movw	r30, r16
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
    2d70:	1f c0       	rjmp	.+62     	; 0x2db0 <main+0x560>
    2d72:	fe 01       	movw	r30, r28
    2d74:	eb 59       	subi	r30, 0x9B	; 155
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	80 e9       	ldi	r24, 0x90	; 144
    2d7a:	91 e0       	ldi	r25, 0x01	; 1
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	80 83       	st	Z, r24
    2d80:	fe 01       	movw	r30, r28
    2d82:	eb 59       	subi	r30, 0x9B	; 155
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 81       	ld	r24, Z
    2d88:	91 81       	ldd	r25, Z+1	; 0x01
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <main+0x53a>
    2d8e:	fe 01       	movw	r30, r28
    2d90:	eb 59       	subi	r30, 0x9B	; 155
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d98:	de 01       	movw	r26, r28
    2d9a:	a9 59       	subi	r26, 0x99	; 153
    2d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e9 59       	subi	r30, 0x99	; 153
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	11 96       	adiw	r26, 0x01	; 1
    2dac:	9c 93       	st	X, r25
    2dae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db0:	fe 01       	movw	r30, r28
    2db2:	e9 59       	subi	r30, 0x99	; 153
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	80 81       	ld	r24, Z
    2db8:	91 81       	ldd	r25, Z+1	; 0x01
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	d1 f6       	brne	.-76     	; 0x2d72 <main+0x522>
    2dbe:	27 c0       	rjmp	.+78     	; 0x2e0e <main+0x5be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc0:	8e 01       	movw	r16, r28
    2dc2:	09 59       	subi	r16, 0x99	; 153
    2dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e7 59       	subi	r30, 0x97	; 151
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	60 81       	ld	r22, Z
    2dce:	71 81       	ldd	r23, Z+1	; 0x01
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	f8 01       	movw	r30, r16
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	80 83       	st	Z, r24
    2de2:	de 01       	movw	r26, r28
    2de4:	ad 59       	subi	r26, 0x9D	; 157
    2de6:	bf 4f       	sbci	r27, 0xFF	; 255
    2de8:	fe 01       	movw	r30, r28
    2dea:	e9 59       	subi	r30, 0x99	; 153
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 81       	ld	r24, Z
    2df0:	91 81       	ldd	r25, Z+1	; 0x01
    2df2:	8d 93       	st	X+, r24
    2df4:	9c 93       	st	X, r25
    2df6:	fe 01       	movw	r30, r28
    2df8:	ed 59       	subi	r30, 0x9D	; 157
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <main+0x5b0>
    2e04:	fe 01       	movw	r30, r28
    2e06:	ed 59       	subi	r30, 0x9D	; 157
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
		LCD_enusend_cmd(0x18);
			_delay_ms(200);
		}

	_delay_ms(2500);
	for(i=0;i<15;i++){
    2e0e:	de 01       	movw	r26, r28
    2e10:	a3 57       	subi	r26, 0x73	; 115
    2e12:	bf 4f       	sbci	r27, 0xFF	; 255
    2e14:	fe 01       	movw	r30, r28
    2e16:	e3 57       	subi	r30, 0x73	; 115
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8f 5f       	subi	r24, 0xFF	; 255
    2e1e:	8c 93       	st	X, r24
    2e20:	fe 01       	movw	r30, r28
    2e22:	e3 57       	subi	r30, 0x73	; 115
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	8f 30       	cpi	r24, 0x0F	; 15
    2e2a:	08 f4       	brcc	.+2      	; 0x2e2e <main+0x5de>
    2e2c:	3a cf       	rjmp	.-396    	; 0x2ca2 <main+0x452>
			LCD_enusend_cmd(0x18);
			_delay_ms(200);
	}

	LCD_enusend_cmd(0x01);
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_enusend_cmd>
    2e34:	fe 01       	movw	r30, r28
    2e36:	e1 5a       	subi	r30, 0xA1	; 161
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	aa ef       	ldi	r26, 0xFA	; 250
    2e40:	b4 e4       	ldi	r27, 0x44	; 68
    2e42:	80 83       	st	Z, r24
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	a2 83       	std	Z+2, r26	; 0x02
    2e48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4a:	8e 01       	movw	r16, r28
    2e4c:	05 5a       	subi	r16, 0xA5	; 165
    2e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e50:	fe 01       	movw	r30, r28
    2e52:	e1 5a       	subi	r30, 0xA1	; 161
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	60 81       	ld	r22, Z
    2e58:	71 81       	ldd	r23, Z+1	; 0x01
    2e5a:	82 81       	ldd	r24, Z+2	; 0x02
    2e5c:	93 81       	ldd	r25, Z+3	; 0x03
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	4a e7       	ldi	r20, 0x7A	; 122
    2e64:	55 e4       	ldi	r21, 0x45	; 69
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	f8 01       	movw	r30, r16
    2e70:	80 83       	st	Z, r24
    2e72:	91 83       	std	Z+1, r25	; 0x01
    2e74:	a2 83       	std	Z+2, r26	; 0x02
    2e76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e5 5a       	subi	r30, 0xA5	; 165
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e8       	ldi	r20, 0x80	; 128
    2e8c:	5f e3       	ldi	r21, 0x3F	; 63
    2e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e92:	88 23       	and	r24, r24
    2e94:	44 f4       	brge	.+16     	; 0x2ea6 <main+0x656>
		__ticks = 1;
    2e96:	fe 01       	movw	r30, r28
    2e98:	e7 5a       	subi	r30, 0xA7	; 167
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
    2ea4:	64 c0       	rjmp	.+200    	; 0x2f6e <main+0x71e>
	else if (__tmp > 65535)
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e5 5a       	subi	r30, 0xA5	; 165
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	0c f0       	brlt	.+2      	; 0x2ec6 <main+0x676>
    2ec4:	43 c0       	rjmp	.+134    	; 0x2f4c <main+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e1 5a       	subi	r30, 0xA1	; 161
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e2       	ldi	r20, 0x20	; 32
    2eda:	51 e4       	ldi	r21, 0x41	; 65
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	8e 01       	movw	r16, r28
    2ee6:	07 5a       	subi	r16, 0xA7	; 167
    2ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	f8 01       	movw	r30, r16
    2ef8:	91 83       	std	Z+1, r25	; 0x01
    2efa:	80 83       	st	Z, r24
    2efc:	1f c0       	rjmp	.+62     	; 0x2f3c <main+0x6ec>
    2efe:	fe 01       	movw	r30, r28
    2f00:	e9 5a       	subi	r30, 0xA9	; 169
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 e9       	ldi	r24, 0x90	; 144
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e9 5a       	subi	r30, 0xA9	; 169
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 81       	ld	r24, Z
    2f14:	91 81       	ldd	r25, Z+1	; 0x01
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	f1 f7       	brne	.-4      	; 0x2f16 <main+0x6c6>
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e9 5a       	subi	r30, 0xA9	; 169
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f24:	de 01       	movw	r26, r28
    2f26:	a7 5a       	subi	r26, 0xA7	; 167
    2f28:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e7 5a       	subi	r30, 0xA7	; 167
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	11 96       	adiw	r26, 0x01	; 1
    2f38:	9c 93       	st	X, r25
    2f3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e7 5a       	subi	r30, 0xA7	; 167
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	d1 f6       	brne	.-76     	; 0x2efe <main+0x6ae>
    2f4a:	27 c0       	rjmp	.+78     	; 0x2f9a <main+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4c:	8e 01       	movw	r16, r28
    2f4e:	07 5a       	subi	r16, 0xA7	; 167
    2f50:	1f 4f       	sbci	r17, 0xFF	; 255
    2f52:	fe 01       	movw	r30, r28
    2f54:	e5 5a       	subi	r30, 0xA5	; 165
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	f8 01       	movw	r30, r16
    2f6a:	91 83       	std	Z+1, r25	; 0x01
    2f6c:	80 83       	st	Z, r24
    2f6e:	de 01       	movw	r26, r28
    2f70:	ab 5a       	subi	r26, 0xAB	; 171
    2f72:	bf 4f       	sbci	r27, 0xFF	; 255
    2f74:	fe 01       	movw	r30, r28
    2f76:	e7 5a       	subi	r30, 0xA7	; 167
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	91 81       	ldd	r25, Z+1	; 0x01
    2f7e:	8d 93       	st	X+, r24
    2f80:	9c 93       	st	X, r25
    2f82:	fe 01       	movw	r30, r28
    2f84:	eb 5a       	subi	r30, 0xAB	; 171
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <main+0x73c>
    2f90:	fe 01       	movw	r30, r28
    2f92:	eb 5a       	subi	r30, 0xAB	; 171
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	91 83       	std	Z+1, r25	; 0x01
    2f98:	80 83       	st	Z, r24
	_delay_ms(2000);

	while(1){

	ADC_START_CONVERSION(0);
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <ADC_START_CONVERSION>
	ADC_GET_RESULT(&THUMB);
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	82 57       	subi	r24, 0x72	; 114
    2fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ADC_GET_RESULT>
    2faa:	fe 01       	movw	r30, r28
    2fac:	ef 5a       	subi	r30, 0xAF	; 175
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	a8 e4       	ldi	r26, 0x48	; 72
    2fb6:	b2 e4       	ldi	r27, 0x42	; 66
    2fb8:	80 83       	st	Z, r24
    2fba:	91 83       	std	Z+1, r25	; 0x01
    2fbc:	a2 83       	std	Z+2, r26	; 0x02
    2fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	8e 01       	movw	r16, r28
    2fc2:	03 5b       	subi	r16, 0xB3	; 179
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	ef 5a       	subi	r30, 0xAF	; 175
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	4a e7       	ldi	r20, 0x7A	; 122
    2fda:	55 e4       	ldi	r21, 0x45	; 69
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	80 83       	st	Z, r24
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	a2 83       	std	Z+2, r26	; 0x02
    2fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e3 5b       	subi	r30, 0xB3	; 179
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	60 81       	ld	r22, Z
    2ff6:	71 81       	ldd	r23, Z+1	; 0x01
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	93 81       	ldd	r25, Z+3	; 0x03
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e8       	ldi	r20, 0x80	; 128
    3002:	5f e3       	ldi	r21, 0x3F	; 63
    3004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3008:	88 23       	and	r24, r24
    300a:	44 f4       	brge	.+16     	; 0x301c <main+0x7cc>
		__ticks = 1;
    300c:	fe 01       	movw	r30, r28
    300e:	e5 5b       	subi	r30, 0xB5	; 181
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	64 c0       	rjmp	.+200    	; 0x30e4 <main+0x894>
	else if (__tmp > 65535)
    301c:	fe 01       	movw	r30, r28
    301e:	e3 5b       	subi	r30, 0xB3	; 179
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	60 81       	ld	r22, Z
    3024:	71 81       	ldd	r23, Z+1	; 0x01
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	3f ef       	ldi	r19, 0xFF	; 255
    302e:	4f e7       	ldi	r20, 0x7F	; 127
    3030:	57 e4       	ldi	r21, 0x47	; 71
    3032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3036:	18 16       	cp	r1, r24
    3038:	0c f0       	brlt	.+2      	; 0x303c <main+0x7ec>
    303a:	43 c0       	rjmp	.+134    	; 0x30c2 <main+0x872>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303c:	fe 01       	movw	r30, r28
    303e:	ef 5a       	subi	r30, 0xAF	; 175
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	93 81       	ldd	r25, Z+3	; 0x03
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e2       	ldi	r20, 0x20	; 32
    3050:	51 e4       	ldi	r21, 0x41	; 65
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	8e 01       	movw	r16, r28
    305c:	05 5b       	subi	r16, 0xB5	; 181
    305e:	1f 4f       	sbci	r17, 0xFF	; 255
    3060:	bc 01       	movw	r22, r24
    3062:	cd 01       	movw	r24, r26
    3064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	f8 01       	movw	r30, r16
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	1f c0       	rjmp	.+62     	; 0x30b2 <main+0x862>
    3074:	fe 01       	movw	r30, r28
    3076:	e7 5b       	subi	r30, 0xB7	; 183
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	80 e9       	ldi	r24, 0x90	; 144
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
    3082:	fe 01       	movw	r30, r28
    3084:	e7 5b       	subi	r30, 0xB7	; 183
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <main+0x83c>
    3090:	fe 01       	movw	r30, r28
    3092:	e7 5b       	subi	r30, 0xB7	; 183
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309a:	de 01       	movw	r26, r28
    309c:	a5 5b       	subi	r26, 0xB5	; 181
    309e:	bf 4f       	sbci	r27, 0xFF	; 255
    30a0:	fe 01       	movw	r30, r28
    30a2:	e5 5b       	subi	r30, 0xB5	; 181
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	11 96       	adiw	r26, 0x01	; 1
    30ae:	9c 93       	st	X, r25
    30b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b2:	fe 01       	movw	r30, r28
    30b4:	e5 5b       	subi	r30, 0xB5	; 181
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	d1 f6       	brne	.-76     	; 0x3074 <main+0x824>
    30c0:	27 c0       	rjmp	.+78     	; 0x3110 <main+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c2:	8e 01       	movw	r16, r28
    30c4:	05 5b       	subi	r16, 0xB5	; 181
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
    30c8:	fe 01       	movw	r30, r28
    30ca:	e3 5b       	subi	r30, 0xB3	; 179
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	f8 01       	movw	r30, r16
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	80 83       	st	Z, r24
    30e4:	de 01       	movw	r26, r28
    30e6:	a9 5b       	subi	r26, 0xB9	; 185
    30e8:	bf 4f       	sbci	r27, 0xFF	; 255
    30ea:	fe 01       	movw	r30, r28
    30ec:	e5 5b       	subi	r30, 0xB5	; 181
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	80 81       	ld	r24, Z
    30f2:	91 81       	ldd	r25, Z+1	; 0x01
    30f4:	8d 93       	st	X+, r24
    30f6:	9c 93       	st	X, r25
    30f8:	fe 01       	movw	r30, r28
    30fa:	e9 5b       	subi	r30, 0xB9	; 185
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	91 81       	ldd	r25, Z+1	; 0x01
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <main+0x8b2>
    3106:	fe 01       	movw	r30, r28
    3108:	e9 5b       	subi	r30, 0xB9	; 185
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	80 83       	st	Z, r24
	_delay_ms(50);
	ADC_START_CONVERSION(1);
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <ADC_START_CONVERSION>
	ADC_GET_RESULT(&INDEX);
    3116:	ce 01       	movw	r24, r28
    3118:	80 57       	subi	r24, 0x70	; 112
    311a:	9f 4f       	sbci	r25, 0xFF	; 255
    311c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ADC_GET_RESULT>
    3120:	fe 01       	movw	r30, r28
    3122:	ed 5b       	subi	r30, 0xBD	; 189
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a8 e4       	ldi	r26, 0x48	; 72
    312c:	b2 e4       	ldi	r27, 0x42	; 66
    312e:	80 83       	st	Z, r24
    3130:	91 83       	std	Z+1, r25	; 0x01
    3132:	a2 83       	std	Z+2, r26	; 0x02
    3134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3136:	8e 01       	movw	r16, r28
    3138:	01 5c       	subi	r16, 0xC1	; 193
    313a:	1f 4f       	sbci	r17, 0xFF	; 255
    313c:	fe 01       	movw	r30, r28
    313e:	ed 5b       	subi	r30, 0xBD	; 189
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	60 81       	ld	r22, Z
    3144:	71 81       	ldd	r23, Z+1	; 0x01
    3146:	82 81       	ldd	r24, Z+2	; 0x02
    3148:	93 81       	ldd	r25, Z+3	; 0x03
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4a e7       	ldi	r20, 0x7A	; 122
    3150:	55 e4       	ldi	r21, 0x45	; 69
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	f8 01       	movw	r30, r16
    315c:	80 83       	st	Z, r24
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	a2 83       	std	Z+2, r26	; 0x02
    3162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3164:	fe 01       	movw	r30, r28
    3166:	ff 96       	adiw	r30, 0x3f	; 63
    3168:	60 81       	ld	r22, Z
    316a:	71 81       	ldd	r23, Z+1	; 0x01
    316c:	82 81       	ldd	r24, Z+2	; 0x02
    316e:	93 81       	ldd	r25, Z+3	; 0x03
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e8       	ldi	r20, 0x80	; 128
    3176:	5f e3       	ldi	r21, 0x3F	; 63
    3178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    317c:	88 23       	and	r24, r24
    317e:	2c f4       	brge	.+10     	; 0x318a <main+0x93a>
		__ticks = 1;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9e af       	std	Y+62, r25	; 0x3e
    3186:	8d af       	std	Y+61, r24	; 0x3d
    3188:	46 c0       	rjmp	.+140    	; 0x3216 <main+0x9c6>
	else if (__tmp > 65535)
    318a:	fe 01       	movw	r30, r28
    318c:	ff 96       	adiw	r30, 0x3f	; 63
    318e:	60 81       	ld	r22, Z
    3190:	71 81       	ldd	r23, Z+1	; 0x01
    3192:	82 81       	ldd	r24, Z+2	; 0x02
    3194:	93 81       	ldd	r25, Z+3	; 0x03
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	3f ef       	ldi	r19, 0xFF	; 255
    319a:	4f e7       	ldi	r20, 0x7F	; 127
    319c:	57 e4       	ldi	r21, 0x47	; 71
    319e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	64 f5       	brge	.+88     	; 0x31fe <main+0x9ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a6:	fe 01       	movw	r30, r28
    31a8:	ed 5b       	subi	r30, 0xBD	; 189
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	51 e4       	ldi	r21, 0x41	; 65
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9e af       	std	Y+62, r25	; 0x3e
    31d2:	8d af       	std	Y+61, r24	; 0x3d
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <main+0x9a4>
    31d6:	80 e9       	ldi	r24, 0x90	; 144
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	9c af       	std	Y+60, r25	; 0x3c
    31dc:	8b af       	std	Y+59, r24	; 0x3b
    31de:	8b ad       	ldd	r24, Y+59	; 0x3b
    31e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <main+0x992>
    31e6:	9c af       	std	Y+60, r25	; 0x3c
    31e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	9e af       	std	Y+62, r25	; 0x3e
    31f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f7       	brne	.-38     	; 0x31d6 <main+0x986>
    31fc:	16 c0       	rjmp	.+44     	; 0x322a <main+0x9da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	fe 01       	movw	r30, r28
    3200:	ff 96       	adiw	r30, 0x3f	; 63
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9e af       	std	Y+62, r25	; 0x3e
    3214:	8d af       	std	Y+61, r24	; 0x3d
    3216:	8d ad       	ldd	r24, Y+61	; 0x3d
    3218:	9e ad       	ldd	r25, Y+62	; 0x3e
    321a:	9a af       	std	Y+58, r25	; 0x3a
    321c:	89 af       	std	Y+57, r24	; 0x39
    321e:	89 ad       	ldd	r24, Y+57	; 0x39
    3220:	9a ad       	ldd	r25, Y+58	; 0x3a
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <main+0x9d2>
    3226:	9a af       	std	Y+58, r25	; 0x3a
    3228:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	ADC_START_CONVERSION(2);
    322a:	82 e0       	ldi	r24, 0x02	; 2
    322c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <ADC_START_CONVERSION>
	ADC_GET_RESULT(&MIDDLE);
    3230:	ce 01       	movw	r24, r28
    3232:	8e 56       	subi	r24, 0x6E	; 110
    3234:	9f 4f       	sbci	r25, 0xFF	; 255
    3236:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ADC_GET_RESULT>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	a8 e4       	ldi	r26, 0x48	; 72
    3240:	b2 e4       	ldi	r27, 0x42	; 66
    3242:	8d ab       	std	Y+53, r24	; 0x35
    3244:	9e ab       	std	Y+54, r25	; 0x36
    3246:	af ab       	std	Y+55, r26	; 0x37
    3248:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324a:	6d a9       	ldd	r22, Y+53	; 0x35
    324c:	7e a9       	ldd	r23, Y+54	; 0x36
    324e:	8f a9       	ldd	r24, Y+55	; 0x37
    3250:	98 ad       	ldd	r25, Y+56	; 0x38
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	4a e7       	ldi	r20, 0x7A	; 122
    3258:	55 e4       	ldi	r21, 0x45	; 69
    325a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	89 ab       	std	Y+49, r24	; 0x31
    3264:	9a ab       	std	Y+50, r25	; 0x32
    3266:	ab ab       	std	Y+51, r26	; 0x33
    3268:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    326a:	69 a9       	ldd	r22, Y+49	; 0x31
    326c:	7a a9       	ldd	r23, Y+50	; 0x32
    326e:	8b a9       	ldd	r24, Y+51	; 0x33
    3270:	9c a9       	ldd	r25, Y+52	; 0x34
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e8       	ldi	r20, 0x80	; 128
    3278:	5f e3       	ldi	r21, 0x3F	; 63
    327a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    327e:	88 23       	and	r24, r24
    3280:	2c f4       	brge	.+10     	; 0x328c <main+0xa3c>
		__ticks = 1;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	98 ab       	std	Y+48, r25	; 0x30
    3288:	8f a7       	std	Y+47, r24	; 0x2f
    328a:	3f c0       	rjmp	.+126    	; 0x330a <main+0xaba>
	else if (__tmp > 65535)
    328c:	69 a9       	ldd	r22, Y+49	; 0x31
    328e:	7a a9       	ldd	r23, Y+50	; 0x32
    3290:	8b a9       	ldd	r24, Y+51	; 0x33
    3292:	9c a9       	ldd	r25, Y+52	; 0x34
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	3f ef       	ldi	r19, 0xFF	; 255
    3298:	4f e7       	ldi	r20, 0x7F	; 127
    329a:	57 e4       	ldi	r21, 0x47	; 71
    329c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a0:	18 16       	cp	r1, r24
    32a2:	4c f5       	brge	.+82     	; 0x32f6 <main+0xaa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a4:	6d a9       	ldd	r22, Y+53	; 0x35
    32a6:	7e a9       	ldd	r23, Y+54	; 0x36
    32a8:	8f a9       	ldd	r24, Y+55	; 0x37
    32aa:	98 ad       	ldd	r25, Y+56	; 0x38
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e2       	ldi	r20, 0x20	; 32
    32b2:	51 e4       	ldi	r21, 0x41	; 65
    32b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	bc 01       	movw	r22, r24
    32be:	cd 01       	movw	r24, r26
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	98 ab       	std	Y+48, r25	; 0x30
    32ca:	8f a7       	std	Y+47, r24	; 0x2f
    32cc:	0f c0       	rjmp	.+30     	; 0x32ec <main+0xa9c>
    32ce:	80 e9       	ldi	r24, 0x90	; 144
    32d0:	91 e0       	ldi	r25, 0x01	; 1
    32d2:	9e a7       	std	Y+46, r25	; 0x2e
    32d4:	8d a7       	std	Y+45, r24	; 0x2d
    32d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    32d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <main+0xa8a>
    32de:	9e a7       	std	Y+46, r25	; 0x2e
    32e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32e4:	98 a9       	ldd	r25, Y+48	; 0x30
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	98 ab       	std	Y+48, r25	; 0x30
    32ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ee:	98 a9       	ldd	r25, Y+48	; 0x30
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	69 f7       	brne	.-38     	; 0x32ce <main+0xa7e>
    32f4:	14 c0       	rjmp	.+40     	; 0x331e <main+0xace>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f6:	69 a9       	ldd	r22, Y+49	; 0x31
    32f8:	7a a9       	ldd	r23, Y+50	; 0x32
    32fa:	8b a9       	ldd	r24, Y+51	; 0x33
    32fc:	9c a9       	ldd	r25, Y+52	; 0x34
    32fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	98 ab       	std	Y+48, r25	; 0x30
    3308:	8f a7       	std	Y+47, r24	; 0x2f
    330a:	8f a5       	ldd	r24, Y+47	; 0x2f
    330c:	98 a9       	ldd	r25, Y+48	; 0x30
    330e:	9c a7       	std	Y+44, r25	; 0x2c
    3310:	8b a7       	std	Y+43, r24	; 0x2b
    3312:	8b a5       	ldd	r24, Y+43	; 0x2b
    3314:	9c a5       	ldd	r25, Y+44	; 0x2c
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <main+0xac6>
    331a:	9c a7       	std	Y+44, r25	; 0x2c
    331c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	ADC_START_CONVERSION(3);
    331e:	83 e0       	ldi	r24, 0x03	; 3
    3320:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <ADC_START_CONVERSION>
	ADC_GET_RESULT  (&RING);
    3324:	ce 01       	movw	r24, r28
    3326:	8c 56       	subi	r24, 0x6C	; 108
    3328:	9f 4f       	sbci	r25, 0xFF	; 255
    332a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ADC_GET_RESULT>
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	a8 e4       	ldi	r26, 0x48	; 72
    3334:	b2 e4       	ldi	r27, 0x42	; 66
    3336:	8f a3       	std	Y+39, r24	; 0x27
    3338:	98 a7       	std	Y+40, r25	; 0x28
    333a:	a9 a7       	std	Y+41, r26	; 0x29
    333c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333e:	6f a1       	ldd	r22, Y+39	; 0x27
    3340:	78 a5       	ldd	r23, Y+40	; 0x28
    3342:	89 a5       	ldd	r24, Y+41	; 0x29
    3344:	9a a5       	ldd	r25, Y+42	; 0x2a
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	4a e7       	ldi	r20, 0x7A	; 122
    334c:	55 e4       	ldi	r21, 0x45	; 69
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8b a3       	std	Y+35, r24	; 0x23
    3358:	9c a3       	std	Y+36, r25	; 0x24
    335a:	ad a3       	std	Y+37, r26	; 0x25
    335c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    335e:	6b a1       	ldd	r22, Y+35	; 0x23
    3360:	7c a1       	ldd	r23, Y+36	; 0x24
    3362:	8d a1       	ldd	r24, Y+37	; 0x25
    3364:	9e a1       	ldd	r25, Y+38	; 0x26
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e8       	ldi	r20, 0x80	; 128
    336c:	5f e3       	ldi	r21, 0x3F	; 63
    336e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3372:	88 23       	and	r24, r24
    3374:	2c f4       	brge	.+10     	; 0x3380 <main+0xb30>
		__ticks = 1;
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	9a a3       	std	Y+34, r25	; 0x22
    337c:	89 a3       	std	Y+33, r24	; 0x21
    337e:	3f c0       	rjmp	.+126    	; 0x33fe <main+0xbae>
	else if (__tmp > 65535)
    3380:	6b a1       	ldd	r22, Y+35	; 0x23
    3382:	7c a1       	ldd	r23, Y+36	; 0x24
    3384:	8d a1       	ldd	r24, Y+37	; 0x25
    3386:	9e a1       	ldd	r25, Y+38	; 0x26
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	3f ef       	ldi	r19, 0xFF	; 255
    338c:	4f e7       	ldi	r20, 0x7F	; 127
    338e:	57 e4       	ldi	r21, 0x47	; 71
    3390:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3394:	18 16       	cp	r1, r24
    3396:	4c f5       	brge	.+82     	; 0x33ea <main+0xb9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3398:	6f a1       	ldd	r22, Y+39	; 0x27
    339a:	78 a5       	ldd	r23, Y+40	; 0x28
    339c:	89 a5       	ldd	r24, Y+41	; 0x29
    339e:	9a a5       	ldd	r25, Y+42	; 0x2a
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e2       	ldi	r20, 0x20	; 32
    33a6:	51 e4       	ldi	r21, 0x41	; 65
    33a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	9a a3       	std	Y+34, r25	; 0x22
    33be:	89 a3       	std	Y+33, r24	; 0x21
    33c0:	0f c0       	rjmp	.+30     	; 0x33e0 <main+0xb90>
    33c2:	80 e9       	ldi	r24, 0x90	; 144
    33c4:	91 e0       	ldi	r25, 0x01	; 1
    33c6:	98 a3       	std	Y+32, r25	; 0x20
    33c8:	8f 8f       	std	Y+31, r24	; 0x1f
    33ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33cc:	98 a1       	ldd	r25, Y+32	; 0x20
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	f1 f7       	brne	.-4      	; 0x33ce <main+0xb7e>
    33d2:	98 a3       	std	Y+32, r25	; 0x20
    33d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d6:	89 a1       	ldd	r24, Y+33	; 0x21
    33d8:	9a a1       	ldd	r25, Y+34	; 0x22
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	9a a3       	std	Y+34, r25	; 0x22
    33de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e0:	89 a1       	ldd	r24, Y+33	; 0x21
    33e2:	9a a1       	ldd	r25, Y+34	; 0x22
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	69 f7       	brne	.-38     	; 0x33c2 <main+0xb72>
    33e8:	14 c0       	rjmp	.+40     	; 0x3412 <main+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ea:	6b a1       	ldd	r22, Y+35	; 0x23
    33ec:	7c a1       	ldd	r23, Y+36	; 0x24
    33ee:	8d a1       	ldd	r24, Y+37	; 0x25
    33f0:	9e a1       	ldd	r25, Y+38	; 0x26
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9a a3       	std	Y+34, r25	; 0x22
    33fc:	89 a3       	std	Y+33, r24	; 0x21
    33fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3400:	9a a1       	ldd	r25, Y+34	; 0x22
    3402:	9e 8f       	std	Y+30, r25	; 0x1e
    3404:	8d 8f       	std	Y+29, r24	; 0x1d
    3406:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3408:	9e 8d       	ldd	r25, Y+30	; 0x1e
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <main+0xbba>
    340e:	9e 8f       	std	Y+30, r25	; 0x1e
    3410:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	ADC_START_CONVERSION(4);
    3412:	84 e0       	ldi	r24, 0x04	; 4
    3414:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <ADC_START_CONVERSION>
	ADC_GET_RESULT(&LITTLE);
    3418:	ce 01       	movw	r24, r28
    341a:	8a 56       	subi	r24, 0x6A	; 106
    341c:	9f 4f       	sbci	r25, 0xFF	; 255
    341e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ADC_GET_RESULT>
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	a8 e4       	ldi	r26, 0x48	; 72
    3428:	b2 e4       	ldi	r27, 0x42	; 66
    342a:	89 8f       	std	Y+25, r24	; 0x19
    342c:	9a 8f       	std	Y+26, r25	; 0x1a
    342e:	ab 8f       	std	Y+27, r26	; 0x1b
    3430:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3432:	69 8d       	ldd	r22, Y+25	; 0x19
    3434:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3436:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3438:	9c 8d       	ldd	r25, Y+28	; 0x1c
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	4a e7       	ldi	r20, 0x7A	; 122
    3440:	55 e4       	ldi	r21, 0x45	; 69
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	8d 8b       	std	Y+21, r24	; 0x15
    344c:	9e 8b       	std	Y+22, r25	; 0x16
    344e:	af 8b       	std	Y+23, r26	; 0x17
    3450:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3452:	6d 89       	ldd	r22, Y+21	; 0x15
    3454:	7e 89       	ldd	r23, Y+22	; 0x16
    3456:	8f 89       	ldd	r24, Y+23	; 0x17
    3458:	98 8d       	ldd	r25, Y+24	; 0x18
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	40 e8       	ldi	r20, 0x80	; 128
    3460:	5f e3       	ldi	r21, 0x3F	; 63
    3462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3466:	88 23       	and	r24, r24
    3468:	2c f4       	brge	.+10     	; 0x3474 <main+0xc24>
		__ticks = 1;
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	9c 8b       	std	Y+20, r25	; 0x14
    3470:	8b 8b       	std	Y+19, r24	; 0x13
    3472:	3f c0       	rjmp	.+126    	; 0x34f2 <main+0xca2>
	else if (__tmp > 65535)
    3474:	6d 89       	ldd	r22, Y+21	; 0x15
    3476:	7e 89       	ldd	r23, Y+22	; 0x16
    3478:	8f 89       	ldd	r24, Y+23	; 0x17
    347a:	98 8d       	ldd	r25, Y+24	; 0x18
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	3f ef       	ldi	r19, 0xFF	; 255
    3480:	4f e7       	ldi	r20, 0x7F	; 127
    3482:	57 e4       	ldi	r21, 0x47	; 71
    3484:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3488:	18 16       	cp	r1, r24
    348a:	4c f5       	brge	.+82     	; 0x34de <main+0xc8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    348c:	69 8d       	ldd	r22, Y+25	; 0x19
    348e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e2       	ldi	r20, 0x20	; 32
    349a:	51 e4       	ldi	r21, 0x41	; 65
    349c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	bc 01       	movw	r22, r24
    34a6:	cd 01       	movw	r24, r26
    34a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	9c 8b       	std	Y+20, r25	; 0x14
    34b2:	8b 8b       	std	Y+19, r24	; 0x13
    34b4:	0f c0       	rjmp	.+30     	; 0x34d4 <main+0xc84>
    34b6:	80 e9       	ldi	r24, 0x90	; 144
    34b8:	91 e0       	ldi	r25, 0x01	; 1
    34ba:	9a 8b       	std	Y+18, r25	; 0x12
    34bc:	89 8b       	std	Y+17, r24	; 0x11
    34be:	89 89       	ldd	r24, Y+17	; 0x11
    34c0:	9a 89       	ldd	r25, Y+18	; 0x12
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	f1 f7       	brne	.-4      	; 0x34c2 <main+0xc72>
    34c6:	9a 8b       	std	Y+18, r25	; 0x12
    34c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ca:	8b 89       	ldd	r24, Y+19	; 0x13
    34cc:	9c 89       	ldd	r25, Y+20	; 0x14
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	9c 8b       	std	Y+20, r25	; 0x14
    34d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d4:	8b 89       	ldd	r24, Y+19	; 0x13
    34d6:	9c 89       	ldd	r25, Y+20	; 0x14
    34d8:	00 97       	sbiw	r24, 0x00	; 0
    34da:	69 f7       	brne	.-38     	; 0x34b6 <main+0xc66>
    34dc:	14 c0       	rjmp	.+40     	; 0x3506 <main+0xcb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34de:	6d 89       	ldd	r22, Y+21	; 0x15
    34e0:	7e 89       	ldd	r23, Y+22	; 0x16
    34e2:	8f 89       	ldd	r24, Y+23	; 0x17
    34e4:	98 8d       	ldd	r25, Y+24	; 0x18
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	9c 8b       	std	Y+20, r25	; 0x14
    34f0:	8b 8b       	std	Y+19, r24	; 0x13
    34f2:	8b 89       	ldd	r24, Y+19	; 0x13
    34f4:	9c 89       	ldd	r25, Y+20	; 0x14
    34f6:	98 8b       	std	Y+16, r25	; 0x10
    34f8:	8f 87       	std	Y+15, r24	; 0x0f
    34fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    34fc:	98 89       	ldd	r25, Y+16	; 0x10
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <main+0xcae>
    3502:	98 8b       	std	Y+16, r25	; 0x10
    3504:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);


	if	   (THUMB Hold && INDEX Hold && MIDDLE Hold && RING Hold && LITTLE Hold)
    3506:	fe 01       	movw	r30, r28
    3508:	e2 57       	subi	r30, 0x72	; 114
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	f3 e0       	ldi	r31, 0x03	; 3
    3512:	81 32       	cpi	r24, 0x21	; 33
    3514:	9f 07       	cpc	r25, r31
    3516:	88 f1       	brcs	.+98     	; 0x357a <main+0xd2a>
    3518:	fe 01       	movw	r30, r28
    351a:	e0 57       	subi	r30, 0x70	; 112
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	80 81       	ld	r24, Z
    3520:	91 81       	ldd	r25, Z+1	; 0x01
    3522:	23 e0       	ldi	r18, 0x03	; 3
    3524:	81 32       	cpi	r24, 0x21	; 33
    3526:	92 07       	cpc	r25, r18
    3528:	40 f1       	brcs	.+80     	; 0x357a <main+0xd2a>
    352a:	fe 01       	movw	r30, r28
    352c:	ee 56       	subi	r30, 0x6E	; 110
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	e3 e0       	ldi	r30, 0x03	; 3
    3536:	81 32       	cpi	r24, 0x21	; 33
    3538:	9e 07       	cpc	r25, r30
    353a:	f8 f0       	brcs	.+62     	; 0x357a <main+0xd2a>
    353c:	fe 01       	movw	r30, r28
    353e:	ec 56       	subi	r30, 0x6C	; 108
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	80 81       	ld	r24, Z
    3544:	91 81       	ldd	r25, Z+1	; 0x01
    3546:	f3 e0       	ldi	r31, 0x03	; 3
    3548:	81 32       	cpi	r24, 0x21	; 33
    354a:	9f 07       	cpc	r25, r31
    354c:	b0 f0       	brcs	.+44     	; 0x357a <main+0xd2a>
    354e:	fe 01       	movw	r30, r28
    3550:	ea 56       	subi	r30, 0x6A	; 106
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	91 81       	ldd	r25, Z+1	; 0x01
    3558:	23 e0       	ldi	r18, 0x03	; 3
    355a:	81 32       	cpi	r24, 0x21	; 33
    355c:	92 07       	cpc	r25, r18
    355e:	68 f0       	brcs	.+26     	; 0x357a <main+0xd2a>
	{
			LCD_enusend_string("    I  AGREE    ");
    3560:	80 ea       	ldi	r24, 0xA0	; 160
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3568:	82 e0       	ldi	r24, 0x02	; 2
    356a:	61 e0       	ldi	r22, 0x01	; 1
    356c:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    3570:	81 eb       	ldi	r24, 0xB1	; 177
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3578:	2b c3       	rjmp	.+1622   	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Hold && INDEX Open && MIDDLE Open && RING Hold && LITTLE Hold)
    357a:	fe 01       	movw	r30, r28
    357c:	e2 57       	subi	r30, 0x72	; 114
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	e3 e0       	ldi	r30, 0x03	; 3
    3586:	81 32       	cpi	r24, 0x21	; 33
    3588:	9e 07       	cpc	r25, r30
    358a:	88 f1       	brcs	.+98     	; 0x35ee <main+0xd9e>
    358c:	fe 01       	movw	r30, r28
    358e:	e0 57       	subi	r30, 0x70	; 112
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	91 81       	ldd	r25, Z+1	; 0x01
    3596:	f3 e0       	ldi	r31, 0x03	; 3
    3598:	80 32       	cpi	r24, 0x20	; 32
    359a:	9f 07       	cpc	r25, r31
    359c:	40 f5       	brcc	.+80     	; 0x35ee <main+0xd9e>
    359e:	fe 01       	movw	r30, r28
    35a0:	ee 56       	subi	r30, 0x6E	; 110
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	80 81       	ld	r24, Z
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	23 e0       	ldi	r18, 0x03	; 3
    35aa:	80 32       	cpi	r24, 0x20	; 32
    35ac:	92 07       	cpc	r25, r18
    35ae:	f8 f4       	brcc	.+62     	; 0x35ee <main+0xd9e>
    35b0:	fe 01       	movw	r30, r28
    35b2:	ec 56       	subi	r30, 0x6C	; 108
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	e3 e0       	ldi	r30, 0x03	; 3
    35bc:	81 32       	cpi	r24, 0x21	; 33
    35be:	9e 07       	cpc	r25, r30
    35c0:	b0 f0       	brcs	.+44     	; 0x35ee <main+0xd9e>
    35c2:	fe 01       	movw	r30, r28
    35c4:	ea 56       	subi	r30, 0x6A	; 106
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	80 81       	ld	r24, Z
    35ca:	91 81       	ldd	r25, Z+1	; 0x01
    35cc:	f3 e0       	ldi	r31, 0x03	; 3
    35ce:	81 32       	cpi	r24, 0x21	; 33
    35d0:	9f 07       	cpc	r25, r31
    35d2:	68 f0       	brcs	.+26     	; 0x35ee <main+0xd9e>
	{
			LCD_enusend_string("   QUOTATION    ");
    35d4:	82 ec       	ldi	r24, 0xC2	; 194
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	61 e0       	ldi	r22, 0x01	; 1
    35e0:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    35e4:	81 eb       	ldi	r24, 0xB1	; 177
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    35ec:	f1 c2       	rjmp	.+1506   	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Open && INDEX Open && MIDDLE Hold && RING Hold && LITTLE Open)
    35ee:	fe 01       	movw	r30, r28
    35f0:	e2 57       	subi	r30, 0x72	; 114
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	80 81       	ld	r24, Z
    35f6:	91 81       	ldd	r25, Z+1	; 0x01
    35f8:	23 e0       	ldi	r18, 0x03	; 3
    35fa:	80 32       	cpi	r24, 0x20	; 32
    35fc:	92 07       	cpc	r25, r18
    35fe:	88 f5       	brcc	.+98     	; 0x3662 <main+0xe12>
    3600:	fe 01       	movw	r30, r28
    3602:	e0 57       	subi	r30, 0x70	; 112
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	91 81       	ldd	r25, Z+1	; 0x01
    360a:	e3 e0       	ldi	r30, 0x03	; 3
    360c:	80 32       	cpi	r24, 0x20	; 32
    360e:	9e 07       	cpc	r25, r30
    3610:	40 f5       	brcc	.+80     	; 0x3662 <main+0xe12>
    3612:	fe 01       	movw	r30, r28
    3614:	ee 56       	subi	r30, 0x6E	; 110
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	80 81       	ld	r24, Z
    361a:	91 81       	ldd	r25, Z+1	; 0x01
    361c:	f3 e0       	ldi	r31, 0x03	; 3
    361e:	81 32       	cpi	r24, 0x21	; 33
    3620:	9f 07       	cpc	r25, r31
    3622:	f8 f0       	brcs	.+62     	; 0x3662 <main+0xe12>
    3624:	fe 01       	movw	r30, r28
    3626:	ec 56       	subi	r30, 0x6C	; 108
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	80 81       	ld	r24, Z
    362c:	91 81       	ldd	r25, Z+1	; 0x01
    362e:	23 e0       	ldi	r18, 0x03	; 3
    3630:	81 32       	cpi	r24, 0x21	; 33
    3632:	92 07       	cpc	r25, r18
    3634:	b0 f0       	brcs	.+44     	; 0x3662 <main+0xe12>
    3636:	fe 01       	movw	r30, r28
    3638:	ea 56       	subi	r30, 0x6A	; 106
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	e3 e0       	ldi	r30, 0x03	; 3
    3642:	80 32       	cpi	r24, 0x20	; 32
    3644:	9e 07       	cpc	r25, r30
    3646:	68 f4       	brcc	.+26     	; 0x3662 <main+0xe12>
	{
			LCD_enusend_string("   I LOVE YOU   ");
    3648:	83 ed       	ldi	r24, 0xD3	; 211
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3650:	82 e0       	ldi	r24, 0x02	; 2
    3652:	61 e0       	ldi	r22, 0x01	; 1
    3654:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    3658:	81 eb       	ldi	r24, 0xB1	; 177
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3660:	b7 c2       	rjmp	.+1390   	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Open && INDEX Open && MIDDLE Open && RING Hold && LITTLE Open)
    3662:	fe 01       	movw	r30, r28
    3664:	e2 57       	subi	r30, 0x72	; 114
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	80 81       	ld	r24, Z
    366a:	91 81       	ldd	r25, Z+1	; 0x01
    366c:	f3 e0       	ldi	r31, 0x03	; 3
    366e:	80 32       	cpi	r24, 0x20	; 32
    3670:	9f 07       	cpc	r25, r31
    3672:	88 f5       	brcc	.+98     	; 0x36d6 <main+0xe86>
    3674:	fe 01       	movw	r30, r28
    3676:	e0 57       	subi	r30, 0x70	; 112
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	80 81       	ld	r24, Z
    367c:	91 81       	ldd	r25, Z+1	; 0x01
    367e:	23 e0       	ldi	r18, 0x03	; 3
    3680:	80 32       	cpi	r24, 0x20	; 32
    3682:	92 07       	cpc	r25, r18
    3684:	40 f5       	brcc	.+80     	; 0x36d6 <main+0xe86>
    3686:	fe 01       	movw	r30, r28
    3688:	ee 56       	subi	r30, 0x6E	; 110
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 81       	ld	r24, Z
    368e:	91 81       	ldd	r25, Z+1	; 0x01
    3690:	e3 e0       	ldi	r30, 0x03	; 3
    3692:	80 32       	cpi	r24, 0x20	; 32
    3694:	9e 07       	cpc	r25, r30
    3696:	f8 f4       	brcc	.+62     	; 0x36d6 <main+0xe86>
    3698:	fe 01       	movw	r30, r28
    369a:	ec 56       	subi	r30, 0x6C	; 108
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	80 81       	ld	r24, Z
    36a0:	91 81       	ldd	r25, Z+1	; 0x01
    36a2:	f3 e0       	ldi	r31, 0x03	; 3
    36a4:	81 32       	cpi	r24, 0x21	; 33
    36a6:	9f 07       	cpc	r25, r31
    36a8:	b0 f0       	brcs	.+44     	; 0x36d6 <main+0xe86>
    36aa:	fe 01       	movw	r30, r28
    36ac:	ea 56       	subi	r30, 0x6A	; 106
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	80 81       	ld	r24, Z
    36b2:	91 81       	ldd	r25, Z+1	; 0x01
    36b4:	23 e0       	ldi	r18, 0x03	; 3
    36b6:	80 32       	cpi	r24, 0x20	; 32
    36b8:	92 07       	cpc	r25, r18
    36ba:	68 f4       	brcc	.+26     	; 0x36d6 <main+0xe86>
	{
			LCD_enusend_string("I'M REALLY LOVE ");
    36bc:	84 ee       	ldi	r24, 0xE4	; 228
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	61 e0       	ldi	r22, 0x01	; 1
    36c8:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("      YOU       ");
    36cc:	85 ef       	ldi	r24, 0xF5	; 245
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    36d4:	7d c2       	rjmp	.+1274   	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Hold && INDEX Open && MIDDLE Hold && RING Hold && LITTLE Open)
    36d6:	fe 01       	movw	r30, r28
    36d8:	e2 57       	subi	r30, 0x72	; 114
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	80 81       	ld	r24, Z
    36de:	91 81       	ldd	r25, Z+1	; 0x01
    36e0:	e3 e0       	ldi	r30, 0x03	; 3
    36e2:	81 32       	cpi	r24, 0x21	; 33
    36e4:	9e 07       	cpc	r25, r30
    36e6:	88 f1       	brcs	.+98     	; 0x374a <main+0xefa>
    36e8:	fe 01       	movw	r30, r28
    36ea:	e0 57       	subi	r30, 0x70	; 112
    36ec:	ff 4f       	sbci	r31, 0xFF	; 255
    36ee:	80 81       	ld	r24, Z
    36f0:	91 81       	ldd	r25, Z+1	; 0x01
    36f2:	f3 e0       	ldi	r31, 0x03	; 3
    36f4:	80 32       	cpi	r24, 0x20	; 32
    36f6:	9f 07       	cpc	r25, r31
    36f8:	40 f5       	brcc	.+80     	; 0x374a <main+0xefa>
    36fa:	fe 01       	movw	r30, r28
    36fc:	ee 56       	subi	r30, 0x6E	; 110
    36fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3700:	80 81       	ld	r24, Z
    3702:	91 81       	ldd	r25, Z+1	; 0x01
    3704:	23 e0       	ldi	r18, 0x03	; 3
    3706:	81 32       	cpi	r24, 0x21	; 33
    3708:	92 07       	cpc	r25, r18
    370a:	f8 f0       	brcs	.+62     	; 0x374a <main+0xefa>
    370c:	fe 01       	movw	r30, r28
    370e:	ec 56       	subi	r30, 0x6C	; 108
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	80 81       	ld	r24, Z
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	e3 e0       	ldi	r30, 0x03	; 3
    3718:	81 32       	cpi	r24, 0x21	; 33
    371a:	9e 07       	cpc	r25, r30
    371c:	b0 f0       	brcs	.+44     	; 0x374a <main+0xefa>
    371e:	fe 01       	movw	r30, r28
    3720:	ea 56       	subi	r30, 0x6A	; 106
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	f3 e0       	ldi	r31, 0x03	; 3
    372a:	80 32       	cpi	r24, 0x20	; 32
    372c:	9f 07       	cpc	r25, r31
    372e:	68 f4       	brcc	.+26     	; 0x374a <main+0xefa>
	{
			LCD_enusend_string("THIS IS TERRIBLE");
    3730:	86 e0       	ldi	r24, 0x06	; 6
    3732:	91 e0       	ldi	r25, 0x01	; 1
    3734:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3738:	82 e0       	ldi	r24, 0x02	; 2
    373a:	61 e0       	ldi	r22, 0x01	; 1
    373c:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    3740:	81 eb       	ldi	r24, 0xB1	; 177
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3748:	43 c2       	rjmp	.+1158   	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Open && INDEX Open && MIDDLE Open && RING Open && LITTLE Open){
    374a:	fe 01       	movw	r30, r28
    374c:	e2 57       	subi	r30, 0x72	; 114
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 81       	ld	r24, Z
    3752:	91 81       	ldd	r25, Z+1	; 0x01
    3754:	23 e0       	ldi	r18, 0x03	; 3
    3756:	80 32       	cpi	r24, 0x20	; 32
    3758:	92 07       	cpc	r25, r18
    375a:	88 f5       	brcc	.+98     	; 0x37be <main+0xf6e>
    375c:	fe 01       	movw	r30, r28
    375e:	e0 57       	subi	r30, 0x70	; 112
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	80 81       	ld	r24, Z
    3764:	91 81       	ldd	r25, Z+1	; 0x01
    3766:	e3 e0       	ldi	r30, 0x03	; 3
    3768:	80 32       	cpi	r24, 0x20	; 32
    376a:	9e 07       	cpc	r25, r30
    376c:	40 f5       	brcc	.+80     	; 0x37be <main+0xf6e>
    376e:	fe 01       	movw	r30, r28
    3770:	ee 56       	subi	r30, 0x6E	; 110
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	80 81       	ld	r24, Z
    3776:	91 81       	ldd	r25, Z+1	; 0x01
    3778:	f3 e0       	ldi	r31, 0x03	; 3
    377a:	80 32       	cpi	r24, 0x20	; 32
    377c:	9f 07       	cpc	r25, r31
    377e:	f8 f4       	brcc	.+62     	; 0x37be <main+0xf6e>
    3780:	fe 01       	movw	r30, r28
    3782:	ec 56       	subi	r30, 0x6C	; 108
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 81       	ld	r24, Z
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	23 e0       	ldi	r18, 0x03	; 3
    378c:	80 32       	cpi	r24, 0x20	; 32
    378e:	92 07       	cpc	r25, r18
    3790:	b0 f4       	brcc	.+44     	; 0x37be <main+0xf6e>
    3792:	fe 01       	movw	r30, r28
    3794:	ea 56       	subi	r30, 0x6A	; 106
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	80 81       	ld	r24, Z
    379a:	91 81       	ldd	r25, Z+1	; 0x01
    379c:	e3 e0       	ldi	r30, 0x03	; 3
    379e:	80 32       	cpi	r24, 0x20	; 32
    37a0:	9e 07       	cpc	r25, r30
    37a2:	68 f4       	brcc	.+26     	; 0x37be <main+0xf6e>
			LCD_enusend_string("   I WISH YOU   ");
    37a4:	87 e1       	ldi	r24, 0x17	; 23
    37a6:	91 e0       	ldi	r25, 0x01	; 1
    37a8:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    37ac:	82 e0       	ldi	r24, 0x02	; 2
    37ae:	61 e0       	ldi	r22, 0x01	; 1
    37b0:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("  A HAPPY LIFE  ");}
    37b4:	88 e2       	ldi	r24, 0x28	; 40
    37b6:	91 e0       	ldi	r25, 0x01	; 1
    37b8:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    37bc:	09 c2       	rjmp	.+1042   	; 0x3bd0 <main+0x1380>

	else if(THUMB Open && INDEX Hold && MIDDLE Hold  && RING Hold && LITTLE Hold)
    37be:	fe 01       	movw	r30, r28
    37c0:	e2 57       	subi	r30, 0x72	; 114
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	80 81       	ld	r24, Z
    37c6:	91 81       	ldd	r25, Z+1	; 0x01
    37c8:	f3 e0       	ldi	r31, 0x03	; 3
    37ca:	80 32       	cpi	r24, 0x20	; 32
    37cc:	9f 07       	cpc	r25, r31
    37ce:	88 f5       	brcc	.+98     	; 0x3832 <main+0xfe2>
    37d0:	fe 01       	movw	r30, r28
    37d2:	e0 57       	subi	r30, 0x70	; 112
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	80 81       	ld	r24, Z
    37d8:	91 81       	ldd	r25, Z+1	; 0x01
    37da:	23 e0       	ldi	r18, 0x03	; 3
    37dc:	81 32       	cpi	r24, 0x21	; 33
    37de:	92 07       	cpc	r25, r18
    37e0:	40 f1       	brcs	.+80     	; 0x3832 <main+0xfe2>
    37e2:	fe 01       	movw	r30, r28
    37e4:	ee 56       	subi	r30, 0x6E	; 110
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	e3 e0       	ldi	r30, 0x03	; 3
    37ee:	81 32       	cpi	r24, 0x21	; 33
    37f0:	9e 07       	cpc	r25, r30
    37f2:	f8 f0       	brcs	.+62     	; 0x3832 <main+0xfe2>
    37f4:	fe 01       	movw	r30, r28
    37f6:	ec 56       	subi	r30, 0x6C	; 108
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	80 81       	ld	r24, Z
    37fc:	91 81       	ldd	r25, Z+1	; 0x01
    37fe:	f3 e0       	ldi	r31, 0x03	; 3
    3800:	81 32       	cpi	r24, 0x21	; 33
    3802:	9f 07       	cpc	r25, r31
    3804:	b0 f0       	brcs	.+44     	; 0x3832 <main+0xfe2>
    3806:	fe 01       	movw	r30, r28
    3808:	ea 56       	subi	r30, 0x6A	; 106
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	80 81       	ld	r24, Z
    380e:	91 81       	ldd	r25, Z+1	; 0x01
    3810:	23 e0       	ldi	r18, 0x03	; 3
    3812:	81 32       	cpi	r24, 0x21	; 33
    3814:	92 07       	cpc	r25, r18
    3816:	68 f0       	brcs	.+26     	; 0x3832 <main+0xfe2>
	{
			LCD_enusend_string("    GOOD JOB    ");
    3818:	89 e3       	ldi	r24, 0x39	; 57
    381a:	91 e0       	ldi	r25, 0x01	; 1
    381c:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3820:	82 e0       	ldi	r24, 0x02	; 2
    3822:	61 e0       	ldi	r22, 0x01	; 1
    3824:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("       		    ");
    3828:	8a e4       	ldi	r24, 0x4A	; 74
    382a:	91 e0       	ldi	r25, 0x01	; 1
    382c:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3830:	cf c1       	rjmp	.+926    	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Open && INDEX Hold && MIDDLE Hold && RING Hold && LITTLE Open)
    3832:	fe 01       	movw	r30, r28
    3834:	e2 57       	subi	r30, 0x72	; 114
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	80 81       	ld	r24, Z
    383a:	91 81       	ldd	r25, Z+1	; 0x01
    383c:	e3 e0       	ldi	r30, 0x03	; 3
    383e:	80 32       	cpi	r24, 0x20	; 32
    3840:	9e 07       	cpc	r25, r30
    3842:	88 f5       	brcc	.+98     	; 0x38a6 <main+0x1056>
    3844:	fe 01       	movw	r30, r28
    3846:	e0 57       	subi	r30, 0x70	; 112
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 81       	ld	r24, Z
    384c:	91 81       	ldd	r25, Z+1	; 0x01
    384e:	f3 e0       	ldi	r31, 0x03	; 3
    3850:	81 32       	cpi	r24, 0x21	; 33
    3852:	9f 07       	cpc	r25, r31
    3854:	40 f1       	brcs	.+80     	; 0x38a6 <main+0x1056>
    3856:	fe 01       	movw	r30, r28
    3858:	ee 56       	subi	r30, 0x6E	; 110
    385a:	ff 4f       	sbci	r31, 0xFF	; 255
    385c:	80 81       	ld	r24, Z
    385e:	91 81       	ldd	r25, Z+1	; 0x01
    3860:	23 e0       	ldi	r18, 0x03	; 3
    3862:	81 32       	cpi	r24, 0x21	; 33
    3864:	92 07       	cpc	r25, r18
    3866:	f8 f0       	brcs	.+62     	; 0x38a6 <main+0x1056>
    3868:	fe 01       	movw	r30, r28
    386a:	ec 56       	subi	r30, 0x6C	; 108
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	80 81       	ld	r24, Z
    3870:	91 81       	ldd	r25, Z+1	; 0x01
    3872:	e3 e0       	ldi	r30, 0x03	; 3
    3874:	81 32       	cpi	r24, 0x21	; 33
    3876:	9e 07       	cpc	r25, r30
    3878:	b0 f0       	brcs	.+44     	; 0x38a6 <main+0x1056>
    387a:	fe 01       	movw	r30, r28
    387c:	ea 56       	subi	r30, 0x6A	; 106
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 81       	ld	r24, Z
    3882:	91 81       	ldd	r25, Z+1	; 0x01
    3884:	f3 e0       	ldi	r31, 0x03	; 3
    3886:	80 32       	cpi	r24, 0x20	; 32
    3888:	9f 07       	cpc	r25, r31
    388a:	68 f4       	brcc	.+26     	; 0x38a6 <main+0x1056>
	{
			LCD_enusend_string("  I'M NOT SURE  ");
    388c:	88 e5       	ldi	r24, 0x58	; 88
    388e:	91 e0       	ldi	r25, 0x01	; 1
    3890:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	61 e0       	ldi	r22, 0x01	; 1
    3898:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    389c:	81 eb       	ldi	r24, 0xB1	; 177
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    38a4:	95 c1       	rjmp	.+810    	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Open && INDEX Hold && MIDDLE Open && RING Open && LITTLE Open)
    38a6:	fe 01       	movw	r30, r28
    38a8:	e2 57       	subi	r30, 0x72	; 114
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	80 81       	ld	r24, Z
    38ae:	91 81       	ldd	r25, Z+1	; 0x01
    38b0:	23 e0       	ldi	r18, 0x03	; 3
    38b2:	80 32       	cpi	r24, 0x20	; 32
    38b4:	92 07       	cpc	r25, r18
    38b6:	88 f5       	brcc	.+98     	; 0x391a <main+0x10ca>
    38b8:	fe 01       	movw	r30, r28
    38ba:	e0 57       	subi	r30, 0x70	; 112
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	80 81       	ld	r24, Z
    38c0:	91 81       	ldd	r25, Z+1	; 0x01
    38c2:	e3 e0       	ldi	r30, 0x03	; 3
    38c4:	81 32       	cpi	r24, 0x21	; 33
    38c6:	9e 07       	cpc	r25, r30
    38c8:	40 f1       	brcs	.+80     	; 0x391a <main+0x10ca>
    38ca:	fe 01       	movw	r30, r28
    38cc:	ee 56       	subi	r30, 0x6E	; 110
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	80 81       	ld	r24, Z
    38d2:	91 81       	ldd	r25, Z+1	; 0x01
    38d4:	f3 e0       	ldi	r31, 0x03	; 3
    38d6:	80 32       	cpi	r24, 0x20	; 32
    38d8:	9f 07       	cpc	r25, r31
    38da:	f8 f4       	brcc	.+62     	; 0x391a <main+0x10ca>
    38dc:	fe 01       	movw	r30, r28
    38de:	ec 56       	subi	r30, 0x6C	; 108
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	80 81       	ld	r24, Z
    38e4:	91 81       	ldd	r25, Z+1	; 0x01
    38e6:	23 e0       	ldi	r18, 0x03	; 3
    38e8:	80 32       	cpi	r24, 0x20	; 32
    38ea:	92 07       	cpc	r25, r18
    38ec:	b0 f4       	brcc	.+44     	; 0x391a <main+0x10ca>
    38ee:	fe 01       	movw	r30, r28
    38f0:	ea 56       	subi	r30, 0x6A	; 106
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 81       	ld	r24, Z
    38f6:	91 81       	ldd	r25, Z+1	; 0x01
    38f8:	e3 e0       	ldi	r30, 0x03	; 3
    38fa:	80 32       	cpi	r24, 0x20	; 32
    38fc:	9e 07       	cpc	r25, r30
    38fe:	68 f4       	brcc	.+26     	; 0x391a <main+0x10ca>
	{
			LCD_enusend_string("    EXCELLENT   ");
    3900:	89 e6       	ldi	r24, 0x69	; 105
    3902:	91 e0       	ldi	r25, 0x01	; 1
    3904:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3908:	82 e0       	ldi	r24, 0x02	; 2
    390a:	61 e0       	ldi	r22, 0x01	; 1
    390c:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    3910:	81 eb       	ldi	r24, 0xB1	; 177
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3918:	5b c1       	rjmp	.+694    	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Hold && INDEX Hold && MIDDLE Hold && RING Hold && LITTLE Open)
    391a:	fe 01       	movw	r30, r28
    391c:	e2 57       	subi	r30, 0x72	; 114
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	80 81       	ld	r24, Z
    3922:	91 81       	ldd	r25, Z+1	; 0x01
    3924:	f3 e0       	ldi	r31, 0x03	; 3
    3926:	81 32       	cpi	r24, 0x21	; 33
    3928:	9f 07       	cpc	r25, r31
    392a:	88 f1       	brcs	.+98     	; 0x398e <main+0x113e>
    392c:	fe 01       	movw	r30, r28
    392e:	e0 57       	subi	r30, 0x70	; 112
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 81       	ld	r24, Z
    3934:	91 81       	ldd	r25, Z+1	; 0x01
    3936:	23 e0       	ldi	r18, 0x03	; 3
    3938:	81 32       	cpi	r24, 0x21	; 33
    393a:	92 07       	cpc	r25, r18
    393c:	40 f1       	brcs	.+80     	; 0x398e <main+0x113e>
    393e:	fe 01       	movw	r30, r28
    3940:	ee 56       	subi	r30, 0x6E	; 110
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	80 81       	ld	r24, Z
    3946:	91 81       	ldd	r25, Z+1	; 0x01
    3948:	e3 e0       	ldi	r30, 0x03	; 3
    394a:	81 32       	cpi	r24, 0x21	; 33
    394c:	9e 07       	cpc	r25, r30
    394e:	f8 f0       	brcs	.+62     	; 0x398e <main+0x113e>
    3950:	fe 01       	movw	r30, r28
    3952:	ec 56       	subi	r30, 0x6C	; 108
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	80 81       	ld	r24, Z
    3958:	91 81       	ldd	r25, Z+1	; 0x01
    395a:	f3 e0       	ldi	r31, 0x03	; 3
    395c:	81 32       	cpi	r24, 0x21	; 33
    395e:	9f 07       	cpc	r25, r31
    3960:	b0 f0       	brcs	.+44     	; 0x398e <main+0x113e>
    3962:	fe 01       	movw	r30, r28
    3964:	ea 56       	subi	r30, 0x6A	; 106
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 81       	ld	r24, Z
    396a:	91 81       	ldd	r25, Z+1	; 0x01
    396c:	23 e0       	ldi	r18, 0x03	; 3
    396e:	80 32       	cpi	r24, 0x20	; 32
    3970:	92 07       	cpc	r25, r18
    3972:	68 f4       	brcc	.+26     	; 0x398e <main+0x113e>
	{
			LCD_enusend_string("       ME       ");
    3974:	8a e7       	ldi	r24, 0x7A	; 122
    3976:	91 e0       	ldi	r25, 0x01	; 1
    3978:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	61 e0       	ldi	r22, 0x01	; 1
    3980:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    3984:	81 eb       	ldi	r24, 0xB1	; 177
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    398c:	21 c1       	rjmp	.+578    	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Open && INDEX Open && MIDDLE Hold && RING Hold && LITTLE Hold)
    398e:	fe 01       	movw	r30, r28
    3990:	e2 57       	subi	r30, 0x72	; 114
    3992:	ff 4f       	sbci	r31, 0xFF	; 255
    3994:	80 81       	ld	r24, Z
    3996:	91 81       	ldd	r25, Z+1	; 0x01
    3998:	e3 e0       	ldi	r30, 0x03	; 3
    399a:	80 32       	cpi	r24, 0x20	; 32
    399c:	9e 07       	cpc	r25, r30
    399e:	88 f5       	brcc	.+98     	; 0x3a02 <main+0x11b2>
    39a0:	fe 01       	movw	r30, r28
    39a2:	e0 57       	subi	r30, 0x70	; 112
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	80 81       	ld	r24, Z
    39a8:	91 81       	ldd	r25, Z+1	; 0x01
    39aa:	f3 e0       	ldi	r31, 0x03	; 3
    39ac:	80 32       	cpi	r24, 0x20	; 32
    39ae:	9f 07       	cpc	r25, r31
    39b0:	40 f5       	brcc	.+80     	; 0x3a02 <main+0x11b2>
    39b2:	fe 01       	movw	r30, r28
    39b4:	ee 56       	subi	r30, 0x6E	; 110
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	80 81       	ld	r24, Z
    39ba:	91 81       	ldd	r25, Z+1	; 0x01
    39bc:	23 e0       	ldi	r18, 0x03	; 3
    39be:	81 32       	cpi	r24, 0x21	; 33
    39c0:	92 07       	cpc	r25, r18
    39c2:	f8 f0       	brcs	.+62     	; 0x3a02 <main+0x11b2>
    39c4:	fe 01       	movw	r30, r28
    39c6:	ec 56       	subi	r30, 0x6C	; 108
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 81       	ld	r24, Z
    39cc:	91 81       	ldd	r25, Z+1	; 0x01
    39ce:	e3 e0       	ldi	r30, 0x03	; 3
    39d0:	81 32       	cpi	r24, 0x21	; 33
    39d2:	9e 07       	cpc	r25, r30
    39d4:	b0 f0       	brcs	.+44     	; 0x3a02 <main+0x11b2>
    39d6:	fe 01       	movw	r30, r28
    39d8:	ea 56       	subi	r30, 0x6A	; 106
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	80 81       	ld	r24, Z
    39de:	91 81       	ldd	r25, Z+1	; 0x01
    39e0:	f3 e0       	ldi	r31, 0x03	; 3
    39e2:	81 32       	cpi	r24, 0x21	; 33
    39e4:	9f 07       	cpc	r25, r31
    39e6:	68 f0       	brcs	.+26     	; 0x3a02 <main+0x11b2>
	{
			LCD_enusend_string(" SEE YOU LATER  ");
    39e8:	8b e8       	ldi	r24, 0x8B	; 139
    39ea:	91 e0       	ldi	r25, 0x01	; 1
    39ec:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    39f0:	82 e0       	ldi	r24, 0x02	; 2
    39f2:	61 e0       	ldi	r22, 0x01	; 1
    39f4:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    39f8:	81 eb       	ldi	r24, 0xB1	; 177
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3a00:	e7 c0       	rjmp	.+462    	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Hold && INDEX Open && MIDDLE Open && RING Open && LITTLE Open)
    3a02:	fe 01       	movw	r30, r28
    3a04:	e2 57       	subi	r30, 0x72	; 114
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	80 81       	ld	r24, Z
    3a0a:	91 81       	ldd	r25, Z+1	; 0x01
    3a0c:	23 e0       	ldi	r18, 0x03	; 3
    3a0e:	81 32       	cpi	r24, 0x21	; 33
    3a10:	92 07       	cpc	r25, r18
    3a12:	88 f1       	brcs	.+98     	; 0x3a76 <main+0x1226>
    3a14:	fe 01       	movw	r30, r28
    3a16:	e0 57       	subi	r30, 0x70	; 112
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	80 81       	ld	r24, Z
    3a1c:	91 81       	ldd	r25, Z+1	; 0x01
    3a1e:	e3 e0       	ldi	r30, 0x03	; 3
    3a20:	80 32       	cpi	r24, 0x20	; 32
    3a22:	9e 07       	cpc	r25, r30
    3a24:	40 f5       	brcc	.+80     	; 0x3a76 <main+0x1226>
    3a26:	fe 01       	movw	r30, r28
    3a28:	ee 56       	subi	r30, 0x6E	; 110
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	80 81       	ld	r24, Z
    3a2e:	91 81       	ldd	r25, Z+1	; 0x01
    3a30:	f3 e0       	ldi	r31, 0x03	; 3
    3a32:	80 32       	cpi	r24, 0x20	; 32
    3a34:	9f 07       	cpc	r25, r31
    3a36:	f8 f4       	brcc	.+62     	; 0x3a76 <main+0x1226>
    3a38:	fe 01       	movw	r30, r28
    3a3a:	ec 56       	subi	r30, 0x6C	; 108
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	23 e0       	ldi	r18, 0x03	; 3
    3a44:	80 32       	cpi	r24, 0x20	; 32
    3a46:	92 07       	cpc	r25, r18
    3a48:	b0 f4       	brcc	.+44     	; 0x3a76 <main+0x1226>
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	ea 56       	subi	r30, 0x6A	; 106
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	80 81       	ld	r24, Z
    3a52:	91 81       	ldd	r25, Z+1	; 0x01
    3a54:	e3 e0       	ldi	r30, 0x03	; 3
    3a56:	80 32       	cpi	r24, 0x20	; 32
    3a58:	9e 07       	cpc	r25, r30
    3a5a:	68 f4       	brcc	.+26     	; 0x3a76 <main+0x1226>
	{
			LCD_enusend_string("   THANK  YOU   5");
    3a5c:	8c e9       	ldi	r24, 0x9C	; 156
    3a5e:	91 e0       	ldi	r25, 0x01	; 1
    3a60:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	61 e0       	ldi	r22, 0x01	; 1
    3a68:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    3a6c:	81 eb       	ldi	r24, 0xB1	; 177
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3a74:	ad c0       	rjmp	.+346    	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Open && INDEX Open && MIDDLE Open && RING Hold && LITTLE Hold)
    3a76:	fe 01       	movw	r30, r28
    3a78:	e2 57       	subi	r30, 0x72	; 114
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	80 81       	ld	r24, Z
    3a7e:	91 81       	ldd	r25, Z+1	; 0x01
    3a80:	f3 e0       	ldi	r31, 0x03	; 3
    3a82:	80 32       	cpi	r24, 0x20	; 32
    3a84:	9f 07       	cpc	r25, r31
    3a86:	88 f5       	brcc	.+98     	; 0x3aea <main+0x129a>
    3a88:	fe 01       	movw	r30, r28
    3a8a:	e0 57       	subi	r30, 0x70	; 112
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	23 e0       	ldi	r18, 0x03	; 3
    3a94:	80 32       	cpi	r24, 0x20	; 32
    3a96:	92 07       	cpc	r25, r18
    3a98:	40 f5       	brcc	.+80     	; 0x3aea <main+0x129a>
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	ee 56       	subi	r30, 0x6E	; 110
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 81       	ld	r24, Z
    3aa2:	91 81       	ldd	r25, Z+1	; 0x01
    3aa4:	e3 e0       	ldi	r30, 0x03	; 3
    3aa6:	80 32       	cpi	r24, 0x20	; 32
    3aa8:	9e 07       	cpc	r25, r30
    3aaa:	f8 f4       	brcc	.+62     	; 0x3aea <main+0x129a>
    3aac:	fe 01       	movw	r30, r28
    3aae:	ec 56       	subi	r30, 0x6C	; 108
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	f3 e0       	ldi	r31, 0x03	; 3
    3ab8:	81 32       	cpi	r24, 0x21	; 33
    3aba:	9f 07       	cpc	r25, r31
    3abc:	b0 f0       	brcs	.+44     	; 0x3aea <main+0x129a>
    3abe:	fe 01       	movw	r30, r28
    3ac0:	ea 56       	subi	r30, 0x6A	; 106
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	80 81       	ld	r24, Z
    3ac6:	91 81       	ldd	r25, Z+1	; 0x01
    3ac8:	23 e0       	ldi	r18, 0x03	; 3
    3aca:	81 32       	cpi	r24, 0x21	; 33
    3acc:	92 07       	cpc	r25, r18
    3ace:	68 f0       	brcs	.+26     	; 0x3aea <main+0x129a>
	{
			LCD_enusend_string("    VICTORY     ");
    3ad0:	8e ea       	ldi	r24, 0xAE	; 174
    3ad2:	91 e0       	ldi	r25, 0x01	; 1
    3ad4:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3ad8:	82 e0       	ldi	r24, 0x02	; 2
    3ada:	61 e0       	ldi	r22, 0x01	; 1
    3adc:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    3ae0:	81 eb       	ldi	r24, 0xB1	; 177
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3ae8:	73 c0       	rjmp	.+230    	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Open && INDEX Open && MIDDLE Open && RING Open && LITTLE Hold)
    3aea:	fe 01       	movw	r30, r28
    3aec:	e2 57       	subi	r30, 0x72	; 114
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	80 81       	ld	r24, Z
    3af2:	91 81       	ldd	r25, Z+1	; 0x01
    3af4:	e3 e0       	ldi	r30, 0x03	; 3
    3af6:	80 32       	cpi	r24, 0x20	; 32
    3af8:	9e 07       	cpc	r25, r30
    3afa:	88 f5       	brcc	.+98     	; 0x3b5e <main+0x130e>
    3afc:	fe 01       	movw	r30, r28
    3afe:	e0 57       	subi	r30, 0x70	; 112
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	f3 e0       	ldi	r31, 0x03	; 3
    3b08:	80 32       	cpi	r24, 0x20	; 32
    3b0a:	9f 07       	cpc	r25, r31
    3b0c:	40 f5       	brcc	.+80     	; 0x3b5e <main+0x130e>
    3b0e:	fe 01       	movw	r30, r28
    3b10:	ee 56       	subi	r30, 0x6E	; 110
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	80 81       	ld	r24, Z
    3b16:	91 81       	ldd	r25, Z+1	; 0x01
    3b18:	23 e0       	ldi	r18, 0x03	; 3
    3b1a:	80 32       	cpi	r24, 0x20	; 32
    3b1c:	92 07       	cpc	r25, r18
    3b1e:	f8 f4       	brcc	.+62     	; 0x3b5e <main+0x130e>
    3b20:	fe 01       	movw	r30, r28
    3b22:	ec 56       	subi	r30, 0x6C	; 108
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	80 81       	ld	r24, Z
    3b28:	91 81       	ldd	r25, Z+1	; 0x01
    3b2a:	e3 e0       	ldi	r30, 0x03	; 3
    3b2c:	80 32       	cpi	r24, 0x20	; 32
    3b2e:	9e 07       	cpc	r25, r30
    3b30:	b0 f4       	brcc	.+44     	; 0x3b5e <main+0x130e>
    3b32:	fe 01       	movw	r30, r28
    3b34:	ea 56       	subi	r30, 0x6A	; 106
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	80 81       	ld	r24, Z
    3b3a:	91 81       	ldd	r25, Z+1	; 0x01
    3b3c:	f3 e0       	ldi	r31, 0x03	; 3
    3b3e:	81 32       	cpi	r24, 0x21	; 33
    3b40:	9f 07       	cpc	r25, r31
    3b42:	68 f0       	brcs	.+26     	; 0x3b5e <main+0x130e>
	{
			LCD_enusend_string("   LETTER (W)   ");
    3b44:	8f eb       	ldi	r24, 0xBF	; 191
    3b46:	91 e0       	ldi	r25, 0x01	; 1
    3b48:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	61 e0       	ldi	r22, 0x01	; 1
    3b50:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("                ");
    3b54:	81 eb       	ldi	r24, 0xB1	; 177
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3b5c:	39 c0       	rjmp	.+114    	; 0x3bd0 <main+0x1380>
	}

	else if(THUMB Open && INDEX Open && MIDDLE Hold && RING Open && LITTLE Open)
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e2 57       	subi	r30, 0x72	; 114
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	23 e0       	ldi	r18, 0x03	; 3
    3b6a:	80 32       	cpi	r24, 0x20	; 32
    3b6c:	92 07       	cpc	r25, r18
    3b6e:	80 f5       	brcc	.+96     	; 0x3bd0 <main+0x1380>
    3b70:	fe 01       	movw	r30, r28
    3b72:	e0 57       	subi	r30, 0x70	; 112
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	80 81       	ld	r24, Z
    3b78:	91 81       	ldd	r25, Z+1	; 0x01
    3b7a:	e3 e0       	ldi	r30, 0x03	; 3
    3b7c:	80 32       	cpi	r24, 0x20	; 32
    3b7e:	9e 07       	cpc	r25, r30
    3b80:	38 f5       	brcc	.+78     	; 0x3bd0 <main+0x1380>
    3b82:	fe 01       	movw	r30, r28
    3b84:	ee 56       	subi	r30, 0x6E	; 110
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	80 81       	ld	r24, Z
    3b8a:	91 81       	ldd	r25, Z+1	; 0x01
    3b8c:	f3 e0       	ldi	r31, 0x03	; 3
    3b8e:	81 32       	cpi	r24, 0x21	; 33
    3b90:	9f 07       	cpc	r25, r31
    3b92:	f0 f0       	brcs	.+60     	; 0x3bd0 <main+0x1380>
    3b94:	fe 01       	movw	r30, r28
    3b96:	ec 56       	subi	r30, 0x6C	; 108
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	80 81       	ld	r24, Z
    3b9c:	91 81       	ldd	r25, Z+1	; 0x01
    3b9e:	23 e0       	ldi	r18, 0x03	; 3
    3ba0:	80 32       	cpi	r24, 0x20	; 32
    3ba2:	92 07       	cpc	r25, r18
    3ba4:	a8 f4       	brcc	.+42     	; 0x3bd0 <main+0x1380>
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	ea 56       	subi	r30, 0x6A	; 106
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	e3 e0       	ldi	r30, 0x03	; 3
    3bb2:	80 32       	cpi	r24, 0x20	; 32
    3bb4:	9e 07       	cpc	r25, r30
    3bb6:	60 f4       	brcc	.+24     	; 0x3bd0 <main+0x1380>
	{
			LCD_enusend_string("  NUMBER EIGHT  ");
    3bb8:	80 ed       	ldi	r24, 0xD0	; 208
    3bba:	91 e0       	ldi	r25, 0x01	; 1
    3bbc:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
			LCD_enuGoToPosition(2,1);
    3bc0:	82 e0       	ldi	r24, 0x02	; 2
    3bc2:	61 e0       	ldi	r22, 0x01	; 1
    3bc4:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
			LCD_enusend_string("       (8)      ");
    3bc8:	81 ee       	ldi	r24, 0xE1	; 225
    3bca:	91 e0       	ldi	r25, 0x01	; 1
    3bcc:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_enusend_string>
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	aa ef       	ldi	r26, 0xFA	; 250
    3bd6:	b3 e4       	ldi	r27, 0x43	; 67
    3bd8:	8b 87       	std	Y+11, r24	; 0x0b
    3bda:	9c 87       	std	Y+12, r25	; 0x0c
    3bdc:	ad 87       	std	Y+13, r26	; 0x0d
    3bde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	4a e7       	ldi	r20, 0x7A	; 122
    3bee:	55 e4       	ldi	r21, 0x45	; 69
    3bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	8f 83       	std	Y+7, r24	; 0x07
    3bfa:	98 87       	std	Y+8, r25	; 0x08
    3bfc:	a9 87       	std	Y+9, r26	; 0x09
    3bfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c00:	6f 81       	ldd	r22, Y+7	; 0x07
    3c02:	78 85       	ldd	r23, Y+8	; 0x08
    3c04:	89 85       	ldd	r24, Y+9	; 0x09
    3c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	40 e8       	ldi	r20, 0x80	; 128
    3c0e:	5f e3       	ldi	r21, 0x3F	; 63
    3c10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c14:	88 23       	and	r24, r24
    3c16:	2c f4       	brge	.+10     	; 0x3c22 <main+0x13d2>
		__ticks = 1;
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	9e 83       	std	Y+6, r25	; 0x06
    3c1e:	8d 83       	std	Y+5, r24	; 0x05
    3c20:	3f c0       	rjmp	.+126    	; 0x3ca0 <main+0x1450>
	else if (__tmp > 65535)
    3c22:	6f 81       	ldd	r22, Y+7	; 0x07
    3c24:	78 85       	ldd	r23, Y+8	; 0x08
    3c26:	89 85       	ldd	r24, Y+9	; 0x09
    3c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	3f ef       	ldi	r19, 0xFF	; 255
    3c2e:	4f e7       	ldi	r20, 0x7F	; 127
    3c30:	57 e4       	ldi	r21, 0x47	; 71
    3c32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c36:	18 16       	cp	r1, r24
    3c38:	4c f5       	brge	.+82     	; 0x3c8c <main+0x143c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	40 e2       	ldi	r20, 0x20	; 32
    3c48:	51 e4       	ldi	r21, 0x41	; 65
    3c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	bc 01       	movw	r22, r24
    3c54:	cd 01       	movw	r24, r26
    3c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	9e 83       	std	Y+6, r25	; 0x06
    3c60:	8d 83       	std	Y+5, r24	; 0x05
    3c62:	0f c0       	rjmp	.+30     	; 0x3c82 <main+0x1432>
    3c64:	80 e9       	ldi	r24, 0x90	; 144
    3c66:	91 e0       	ldi	r25, 0x01	; 1
    3c68:	9c 83       	std	Y+4, r25	; 0x04
    3c6a:	8b 83       	std	Y+3, r24	; 0x03
    3c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c70:	01 97       	sbiw	r24, 0x01	; 1
    3c72:	f1 f7       	brne	.-4      	; 0x3c70 <main+0x1420>
    3c74:	9c 83       	std	Y+4, r25	; 0x04
    3c76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c78:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	9e 83       	std	Y+6, r25	; 0x06
    3c80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c82:	8d 81       	ldd	r24, Y+5	; 0x05
    3c84:	9e 81       	ldd	r25, Y+6	; 0x06
    3c86:	00 97       	sbiw	r24, 0x00	; 0
    3c88:	69 f7       	brne	.-38     	; 0x3c64 <main+0x1414>
    3c8a:	14 c0       	rjmp	.+40     	; 0x3cb4 <main+0x1464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c8e:	78 85       	ldd	r23, Y+8	; 0x08
    3c90:	89 85       	ldd	r24, Y+9	; 0x09
    3c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	9e 83       	std	Y+6, r25	; 0x06
    3c9e:	8d 83       	std	Y+5, r24	; 0x05
    3ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca4:	9a 83       	std	Y+2, r25	; 0x02
    3ca6:	89 83       	std	Y+1, r24	; 0x01
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	f1 f7       	brne	.-4      	; 0x3cac <main+0x145c>
    3cb0:	9a 83       	std	Y+2, r25	; 0x02
    3cb2:	89 83       	std	Y+1, r24	; 0x01
	}

		_delay_ms(500);
		LCD_enuGoToPosition(1,1);
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	61 e0       	ldi	r22, 0x01	; 1
    3cb8:	0e 94 49 13 	call	0x2692	; 0x2692 <LCD_enuGoToPosition>
    3cbc:	6e c9       	rjmp	.-3364   	; 0x2f9a <main+0x74a>

00003cbe <__udivmodhi4>:
    3cbe:	aa 1b       	sub	r26, r26
    3cc0:	bb 1b       	sub	r27, r27
    3cc2:	51 e1       	ldi	r21, 0x11	; 17
    3cc4:	07 c0       	rjmp	.+14     	; 0x3cd4 <__udivmodhi4_ep>

00003cc6 <__udivmodhi4_loop>:
    3cc6:	aa 1f       	adc	r26, r26
    3cc8:	bb 1f       	adc	r27, r27
    3cca:	a6 17       	cp	r26, r22
    3ccc:	b7 07       	cpc	r27, r23
    3cce:	10 f0       	brcs	.+4      	; 0x3cd4 <__udivmodhi4_ep>
    3cd0:	a6 1b       	sub	r26, r22
    3cd2:	b7 0b       	sbc	r27, r23

00003cd4 <__udivmodhi4_ep>:
    3cd4:	88 1f       	adc	r24, r24
    3cd6:	99 1f       	adc	r25, r25
    3cd8:	5a 95       	dec	r21
    3cda:	a9 f7       	brne	.-22     	; 0x3cc6 <__udivmodhi4_loop>
    3cdc:	80 95       	com	r24
    3cde:	90 95       	com	r25
    3ce0:	bc 01       	movw	r22, r24
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	08 95       	ret

00003ce6 <__divmodhi4>:
    3ce6:	97 fb       	bst	r25, 7
    3ce8:	09 2e       	mov	r0, r25
    3cea:	07 26       	eor	r0, r23
    3cec:	0a d0       	rcall	.+20     	; 0x3d02 <__divmodhi4_neg1>
    3cee:	77 fd       	sbrc	r23, 7
    3cf0:	04 d0       	rcall	.+8      	; 0x3cfa <__divmodhi4_neg2>
    3cf2:	e5 df       	rcall	.-54     	; 0x3cbe <__udivmodhi4>
    3cf4:	06 d0       	rcall	.+12     	; 0x3d02 <__divmodhi4_neg1>
    3cf6:	00 20       	and	r0, r0
    3cf8:	1a f4       	brpl	.+6      	; 0x3d00 <__divmodhi4_exit>

00003cfa <__divmodhi4_neg2>:
    3cfa:	70 95       	com	r23
    3cfc:	61 95       	neg	r22
    3cfe:	7f 4f       	sbci	r23, 0xFF	; 255

00003d00 <__divmodhi4_exit>:
    3d00:	08 95       	ret

00003d02 <__divmodhi4_neg1>:
    3d02:	f6 f7       	brtc	.-4      	; 0x3d00 <__divmodhi4_exit>
    3d04:	90 95       	com	r25
    3d06:	81 95       	neg	r24
    3d08:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0a:	08 95       	ret

00003d0c <__prologue_saves__>:
    3d0c:	2f 92       	push	r2
    3d0e:	3f 92       	push	r3
    3d10:	4f 92       	push	r4
    3d12:	5f 92       	push	r5
    3d14:	6f 92       	push	r6
    3d16:	7f 92       	push	r7
    3d18:	8f 92       	push	r8
    3d1a:	9f 92       	push	r9
    3d1c:	af 92       	push	r10
    3d1e:	bf 92       	push	r11
    3d20:	cf 92       	push	r12
    3d22:	df 92       	push	r13
    3d24:	ef 92       	push	r14
    3d26:	ff 92       	push	r15
    3d28:	0f 93       	push	r16
    3d2a:	1f 93       	push	r17
    3d2c:	cf 93       	push	r28
    3d2e:	df 93       	push	r29
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
    3d34:	ca 1b       	sub	r28, r26
    3d36:	db 0b       	sbc	r29, r27
    3d38:	0f b6       	in	r0, 0x3f	; 63
    3d3a:	f8 94       	cli
    3d3c:	de bf       	out	0x3e, r29	; 62
    3d3e:	0f be       	out	0x3f, r0	; 63
    3d40:	cd bf       	out	0x3d, r28	; 61
    3d42:	09 94       	ijmp

00003d44 <__epilogue_restores__>:
    3d44:	2a 88       	ldd	r2, Y+18	; 0x12
    3d46:	39 88       	ldd	r3, Y+17	; 0x11
    3d48:	48 88       	ldd	r4, Y+16	; 0x10
    3d4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d50:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d52:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d54:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d56:	b9 84       	ldd	r11, Y+9	; 0x09
    3d58:	c8 84       	ldd	r12, Y+8	; 0x08
    3d5a:	df 80       	ldd	r13, Y+7	; 0x07
    3d5c:	ee 80       	ldd	r14, Y+6	; 0x06
    3d5e:	fd 80       	ldd	r15, Y+5	; 0x05
    3d60:	0c 81       	ldd	r16, Y+4	; 0x04
    3d62:	1b 81       	ldd	r17, Y+3	; 0x03
    3d64:	aa 81       	ldd	r26, Y+2	; 0x02
    3d66:	b9 81       	ldd	r27, Y+1	; 0x01
    3d68:	ce 0f       	add	r28, r30
    3d6a:	d1 1d       	adc	r29, r1
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	f8 94       	cli
    3d70:	de bf       	out	0x3e, r29	; 62
    3d72:	0f be       	out	0x3f, r0	; 63
    3d74:	cd bf       	out	0x3d, r28	; 61
    3d76:	ed 01       	movw	r28, r26
    3d78:	08 95       	ret

00003d7a <_exit>:
    3d7a:	f8 94       	cli

00003d7c <__stop_program>:
    3d7c:	ff cf       	rjmp	.-2      	; 0x3d7c <__stop_program>
